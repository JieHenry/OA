package com.casd.controller.uc;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.controller.web.common.Authorize;
import com.casd.controller.web.common.Authorize.ResultType;
import com.casd.controller.web.common.Authorize.RoleEnum;
import com.casd.entity.uc.User;
import com.casd.service.uc.UserService;

@Controller
@RequestMapping("/admin")
public class UserController {

	@Autowired
	private UserService userService;

	@RequestMapping(value = "/userList", method = RequestMethod.GET)
	public ModelAndView userList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();

		mv.setViewName("uc/userList");
		return mv;

	}

	/**
	 * 用户列表信息
	 * 
	 * */
	@RequestMapping(value = "/userList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> userList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Ref<Integer> record = new Ref<Integer>();

		StringBuilder sbf = new StringBuilder();// 拼接sql

		StringBuilder fields = new StringBuilder();// 需要显示字段
		fields.append(" *");

		Map<String, Object> json = new HashMap<String, Object>();
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		String username = request.getParameter("username");
		String phone_number = request.getParameter("phone_number");
		sbf.append(" uc_user where 1=1");
		if (StringUtils.hasText(username)) {
			sbf.append(" and username like '%" + username + "%'");
		}

		if (StringUtils.hasText(phone_number)) {
			sbf.append(" and phone_number like '%" + phone_number + "%'");
		}
		List<Map<String, Object>> data = userService.userList(pageIndex,
				pageSize, record, sbf.toString(), fields.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}

	@RequestMapping(value = "/editUser", method = RequestMethod.GET)
	public ModelAndView editUser(Model model, HttpServletRequest request)
			throws Exception {
		ModelAndView mv = new ModelAndView();
		String cid = request.getParameter("cid");
		// 根据用户userid查询用户信息
		if (cid != null) {
			String fields = " username,userid,password";
			StringBuilder sbf = new StringBuilder();
			sbf.append(" `uc_user` where 1=1");

			sbf.append(" and userid=" + cid);

			Map<String, Object> data = userService.queryUserById(fields, sbf.toString());
			mv.addObject("pro", data);

		}
		mv.setViewName("uc/editUser");
		return mv;
	}

	/**
	 * 编辑用户
	 * */
	@RequestMapping(value = "/editUser", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> editUser(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Map<String, Object> params = new HashMap<String, Object>();
   try {
	

		String username = request.getParameter("username");
		String userid = request.getParameter("userid");
		String password = request.getParameter("password");
	

	
	
		if (userid == "") {
			

		} else { // 编辑用户信息

			StringBuilder pars = new StringBuilder();
			if (username != null) {
				pars.append(" username='" + username + "',");
			}
			if (password != null) {
				pars.append(" password='" + password + "'");
			}
			

			String where = " where userid=" + userid;
		System.out.println(pars.toString()+ where);
			userService.updateUser(pars.toString(), where);

		}
		params.put("Success", "操作成功！");
	
	} catch (Exception e) {
		params.put("Msg", "操作失败！");
		params.put("Success", false);
		
	}
		return params;

	}

	// 批量删除用户信息
	@RequestMapping(value = "/deleteUser", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> deleteUser(HttpServletRequest request)
			throws Exception {
		Map<String, Object> params = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		String fields = " uc_user,hr_contract, hr_register,hr_salary,hr_training_record";
		String cid = request.getParameter("cid");
		cid = cid.substring(1);
		String[] ids = cid.split("]");

		sbf.append(" uc_user LEFT JOIN hr_contract ON uc_user.userid = hr_contract.user_id");
		sbf.append(" LEFT JOIN hr_register ON hr_register.user_id =uc_user.userid");
		sbf.append(" LEFT JOIN hr_salary ON hr_salary.user_id =uc_user.userid");
		sbf.append(" LEFT JOIN hr_training_record ON hr_training_record.user_id =uc_user.userid");
		sbf.append(" where userid in (" + ids[0] + ")");
		userService.deleteUser(fields, sbf.toString());

		return null;

	}

	/**
	 * @author 求职登记表打印
	 * */
	@Authorize(code = "APP_ADMIN_ROOT", type = ResultType.REDIRECT, role = RoleEnum.ADMIN)
	@RequestMapping(value = "/qiuzhibiao", method = RequestMethod.GET)
	public String qiuzhi() {

		return "uc/qiuzhibiao";

	}

	

}
