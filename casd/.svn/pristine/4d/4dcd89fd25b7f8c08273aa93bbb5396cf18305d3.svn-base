package com.casd.serviceimpl.ownCenter;

import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.runtime.ProcessInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.casd.controller.web.Ref;
import com.casd.dao.flow.FlowDao;
import com.casd.dao.ownCenter.LeaveDao;
import com.casd.entity.flow.FlowAudit;
import com.casd.entity.ownCenter.Leave;
import com.casd.service.flow.FlowService;
import com.casd.service.ownCenter.LeaveService;

@Service
public class LeaveServiceImpl implements LeaveService {

	@Autowired
	private LeaveDao leaveDao;
	@Autowired
	private FlowDao flowDao;
	
	@Autowired
	private ProcessEngine processEngine;//注入bean,获取流程引擎
	@Autowired
	private FlowService flowService;
	
	/**
	 * 保存请假条同时启动流程
	 * */
	@Override
	@Transactional
	public int saveLeave(Leave leave,Map<String, Object> map) {
		  leave.setStatus(0);
		  int id=leaveDao.saveLeave(leave);
          map.put("flow_bill_id", leave.getId()); // 单据id
		  flowService.saveFlowAudit(map);
		      
		return id;
	}

	@Override
	public Leave initLeave(Map<String, Object> map) {
		if(map.get("id")==null){
			int id=flowDao.getBillID(map);
			map.put("id", id);
		}
		return leaveDao.initLeave(map);
	}

	@Override
	@Transactional
	public List<Map<String, Object>> leaveList(int page, int pageSize,
			Ref<Integer> record, String where) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();

		param.put("where", where);

		if (record != null) {
			Integer count = leaveDao.getLeaveCount(param);
			record.setValue(count);
		}
		// 分页
		if (pageSize <= 0)
			throw new Exception("pageSize 必须 > 0");

		param.put("limit", String.format("limit %1$s,%2$s", page < 0 ? 0 : page
				* pageSize, pageSize));

		return leaveDao.leaveList(param);
		
	}

	@Override
	public Leave findLeaveByID(Map<String, Object> map) {
		
		return leaveDao.findLeaveByID(map);
		
	}

	@Override
	public void updateLeave(Leave leave) {
		leaveDao.updateLeave(leave);
	}
	
	
	
	
	
	@Override
	public void deleLeave(Map<String, Object> map) {
			leaveDao.deleLeave(map);
	}


	@Override
	public String cancelLeave(Map<String, Object> map) {
		int status=leaveDao.selectStatus(map);
		if(status==1){
			leaveDao.deleLeave(map);
			
		}else{
			return "请假条已批准不能取消,请联系人事处理!";
		}
		return null;
	}

	@Override
	public void updateStatus(Map<String, Object> map) {
		Object nextNode = map.get("nextNode");
		if(nextNode!=null){
			map.put("status", 3);
			leaveDao.updateStatus(map);
		}else{
			map.put("status", 0);
			leaveDao.updateStatus(map);
		}
		
	}
	//请假条审核
	@Transactional
	public Map<String, Object> leave_pass(Map<String, Object> map) {
		   String auditor=map.get("auditor").toString();
		    flowService.auditBill(map,auditor);
		    
		    if (map.get("size").toString().equals("0")) {
		    	
		    	map.put("status", 3);
		        leaveDao.updateStatus(map);
		    	
		    }else {
				
			}
		return null;
		
	}
	 public void leave_reject(Map<String, Object> map) {
			int flow_node_order=Integer.parseInt(map.get("node_order").toString());
			Map<String, Object> idMap=new HashMap<String, Object>();
		    int flowAuditId=Integer.valueOf(map.get("flow_audit_last_auditid").toString());
		    idMap.put("auditID", flowAuditId);
		    FlowAudit flowAuditMap= flowDao.getFlowAudit(idMap);
		    
		    
			Date currentDate = new Date(System.currentTimeMillis());   
			FlowAudit audit=new FlowAudit();
			audit.setFlow_audit_time(null);
			audit.setFlow_bill_id(flowAuditMap.getFlow_bill_id());
			audit.setFlow_submitter(flowAuditMap.getFlow_submitter());
			audit.setFlow_bill_url(flowAuditMap.getFlow_bill_url());
			audit.setFlow_bill_type(flowAuditMap.getFlow_bill_type());
			audit.setFlow_submit_time(flowAuditMap.getFlow_submit_time());
			audit.setFlow_audit_option(null);
			audit.setFlow_audit_next_auditid(0);
			audit.setFlow_auditer(flowAuditMap.getFlow_auditer());
			audit.setFlow_audit_id(0);
			audit.setFlow_audit_last_auditid(flowAuditMap.getFlow_audit_last_auditid());
			audit.setFlow_status(1);
			audit.setFlow_node_order(flowAuditMap.getFlow_node_order());
			  if(flow_node_order-1==1) {
			 
			  }  else {
               flowDao.addFlowAudit(audit);
			}
			Map<String, Object> nextIDMap=new HashMap<String, Object>();
			nextIDMap.put("id", 0);
			nextIDMap.put("flow_audit_time", currentDate);
			nextIDMap.put("flow_status", 3);
			nextIDMap.put("flow_audit_option",map.get("option").toString());
			nextIDMap.put("where", Integer.valueOf(map.get("auditID").toString()));
			flowDao.addNextAuditID(nextIDMap);
			  if(flow_node_order-1==1) {
				   map.put("status",1);
				  leaveDao.updateStatus(map);
				  
				  
				  
			  }
	}
	
}
