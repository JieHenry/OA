package com.casd.controller.personManagem;

import java.io.IOException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.controller.web.utils.SendmailUtil;
import com.casd.dao.hr.HrContractDao;
import com.casd.dao.hr.HrSalaryDao;
import com.casd.dao.hr.HregisterDao;
import com.casd.dao.hr.HtrainingrecordDao;
import com.casd.dao.uc.UserDao;
import com.casd.entity.tree.Menu;
import com.casd.entity.uc.Company;
import com.casd.entity.uc.Role;
import com.casd.entity.uc.User;
import com.casd.service.flow.FlowService;
import com.casd.service.hr.HregisterService;
import com.casd.service.uc.OrgService;
import com.casd.service.uc.RoleService;
import com.casd.service.uc.UserService;

@Controller
@RequestMapping("/admin")
public class PmHomeController {

	// private Mail mail;
	@Autowired
	private FlowService flowService;
	@Autowired
	private UserService userService;
	@Autowired
	private RoleService roleService;
	@Autowired
	private HregisterDao hregisterDao;
	@Autowired
	private HtrainingrecordDao htrainingrecordDao;
	@Autowired
	private HrSalaryDao hrSalaryDao;
	@Autowired
	private HrContractDao hrContractDao;
	@Autowired
	private HregisterService hregisterService;

	
	@Autowired
	private OrgService orgService;
	
	
	@Autowired
	private UserDao userDao;

	// private Mail mail;

	// private Mail mail;

	/**
	 * 人事首页
	 */

	@RequestMapping(value = "/pmHome", method = RequestMethod.GET)
	public ModelAndView pmHome(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("personManagem/pmHome");
		return mv;
	}

	/**
	 * 发送邮件页面跳转
	 */

	@RequestMapping(value = "/sendEmail", method = RequestMethod.GET)
	public ModelAndView sendEmail(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("personManagem/sendEmail");
		return mv;
	}

	/**
	 * 邮件发送
	 */

	@RequestMapping(value = "/email", method = RequestMethod.POST)
	@ResponseBody
	public String email(HttpServletRequest request, Model model) {
		String receive = request.getParameter("receive");
		String theme = request.getParameter("theme");
		String content = request.getParameter("content");

		SendmailUtil sendmailUtil = null;
		try {
			sendmailUtil = (SendmailUtil) Class.forName(
					"com.casd.controller.web.utils.SendmailUtil").newInstance();
			sendmailUtil.doSendHtmlEmail(theme, content, receive);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "";
	}

	@RequestMapping(value = "personalRecords", method = RequestMethod.GET)
	public ModelAndView personalRecords(Model model, HttpServletRequest request)
			throws Exception {
		String cid = request.getParameter("cid");

		JSONObject map = new JSONObject();
		ModelAndView mv = new ModelAndView();
		Map<String, Object> param = new HashMap<String, Object>();

		// 查看角色
		StringBuffer sbf = new StringBuffer();
		String fields = "b.role_id,b.role_name";
		sbf.append(" uc_role b");
		List<Map<String, Object>> roles = roleService.seleroleById(fields,
				sbf.toString());
		mv.addObject("roles", roles);

		// 根据用户userid查询用户信息
		if (cid != null) {
			// 表头
			String field = " *";

			sbf.delete(0, sbf.length());
			//sbf.append(" `uc_user` where 1=1");
			
			sbf.append("  uc_user us ");
			sbf.append("LEFT JOIN uc_department dep on us.department=dep.department_id ");
			sbf.append("LEFT JOIN uc_center cen on dep.department_centerId=cen.center_id ");
			sbf.append("LEFT JOIN uc_company com on com.company_id=dep.department_companyId ");
			sbf.append(" where 1=1 ");
			
			sbf.append(" and userid=" + cid);
			Map<String, Object> data = userService.queryUserById(field, sbf.toString());
			mv.addObject("pro", data);

			StringBuilder sBuilder = new StringBuilder();
			JSONObject jsonObject = new JSONObject();

			// 公司职员变更
			param.put("fields", "*");
			sBuilder.append(" hr_register h where 1=1 and user_id=" + cid);
			param.put("where", sBuilder.toString());
			List<Map<String, Object>> listregister = hregisterDao
					.selectHregister(param);
			jsonObject.put("rows", listregister);
			map.put("rows1", jsonObject);

			// 培训
			sBuilder.delete(0, sBuilder.length());
			param.put("fields", "*");
			sBuilder.append(" hr_training_record  where 1=1 and user_id=" + cid);
			param.put("where", sBuilder.toString());
			List<Map<String, Object>> listrecord = htrainingrecordDao
					.getRainingrecord(param);
			jsonObject.clear();
			jsonObject.put("rows", listrecord);
			map.put("rows2", jsonObject);

			// 薪资调整记录
			sBuilder.delete(0, sBuilder.length());
			param.put("fields", "*");
			sBuilder.append(" hr_salary  h where 1=1 and user_id=" + cid);
			param.put("where", sBuilder.toString());
			List<Map<String, Object>> listSalary = hrSalaryDao
					.selectSalary(param);
			jsonObject.clear();
			jsonObject.put("rows", listSalary);
			map.put("rows3", jsonObject);

			// 合同期限表
			sBuilder.delete(0, sBuilder.length());// 清空StringBuilder
			sBuilder.append(" hr_contract userid where user_id=" + cid);
			param.put("fields", "out_stime,start_time,remark,pact_id");
			param.put("where", sBuilder.toString());
			List<Map<String, Object>> paramss = hrContractDao
					.selectgetAll(param);
			jsonObject.clear();
			jsonObject.put("rows", paramss.toString());
			map.put("rows4", jsonObject);

		}else {
			Map<String, Object> data=new HashMap<String, Object>();
			data.put("userid", 0);
			mv.addObject("pro", data);
		}

		model.addAttribute("rows", map);
		mv.setViewName("personManagem/personalRecords");
		return mv;

	}

	// 人事档案保存
	//@SuppressWarnings("null")
	@RequestMapping(value = "savePersonalRecords", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> savePersonalRecords(HttpServletRequest request,User user)
			throws Exception {
		/*String userid = request.getParameter("userid");
		StringBuffer sbf = new StringBuffer();
		Map<String, Object> params = new HashMap<String, Object>();

		User user = new User();
		if (userid == null||userid.isEmpty()) {
			userid = "0";
		}
		user.setUserid(Integer.parseInt(userid));

		user.setUsername(request.getParameter("username"));
		user.setSex(Integer.parseInt(request.getParameter("sex")));
		user.setBirth_date(Date.valueOf(request.getParameter("birth_date")));
		int age = Integer.parseInt((String) (request.getParameter("age").toString().isEmpty() ? 1 : request.getParameter("age").toString()));
		user.setMarital_status(Integer.parseInt(request
				.getParameter("marital_status")));
		user.setAge(age);
		user.setIncorporation_date(Date.valueOf(request
				.getParameter("incorporation_date")));
		user.setCard_address(request.getParameter("card_address").trim());
		user.setRole_id(Integer.parseInt(request.getParameter("role_id")));
		user.setUser_card(request.getParameter("user_card"));
		user.setPhone_number(request.getParameter("phone_number"));
		user.setEmail(request.getParameter("email"));
		user.setEmergent_contact(request.getParameter("emergent_contact"));
		user.setEducation(request.getParameter("education"));
		user.setProfl_certificate(request.getParameter("profl_certificate"));
		user.setPermanent_address(request.getParameter("permanent_address")
				.trim());
		user.setDepartment(request.getParameter("department"));

		userid = (String) ((request.getParameter("userid").isEmpty() ? String
				.valueOf(user.getUserid()) : request.getParameter("userid")));

		// 存在就更新 不存在就添加
		String rows = request.getParameter("rows");
		JSONArray myJsonArray = JSONArray.fromObject(request
				.getParameter("rows"));
		JSONArray myJsonArray2 = JSONArray.fromObject(request
				.getParameter("rows2"));
		JSONArray myJsonArray3 = JSONArray.fromObject(request
				.getParameter("rows3"));
		JSONArray myJsonArray4 = JSONArray.fromObject(request
				.getParameter("rows4"));

		hregisterService.savexistence(user, myJsonArray, myJsonArray2,
				myJsonArray3, myJsonArray4);

		return null;*/
		
		JSONArray myJsonArray = JSONArray.fromObject(request
				.getParameter("rows"));
		JSONArray myJsonArray2 = JSONArray.fromObject(request
				.getParameter("rows2"));
		JSONArray myJsonArray3 = JSONArray.fromObject(request
				.getParameter("rows3"));
		JSONArray myJsonArray4 = JSONArray.fromObject(request
				.getParameter("rows4"));

		hregisterService.savexistence(user, myJsonArray, myJsonArray2,
				myJsonArray3, myJsonArray4);
		return null;
		
	}

	@RequestMapping(value = "/pmuserList", method = RequestMethod.GET)
	public ModelAndView userList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("personManagem/pmuserList");
		return mv;

	}

	/**
	 * 用户列表信息
	 * 
	 * */
	@RequestMapping(value = "/pmuserList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> userList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Ref<Integer> record = new Ref<Integer>();
		StringBuilder sbf = new StringBuilder();
		StringBuilder fields = new StringBuilder();

		// 显示字段
		fields.append("a.*,b.department_name,c.center_name,d.company_name");

		Map<String, Object> json = new HashMap<String, Object>();
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		String username = request.getParameter("username");
		String userid = request.getParameter("userid");
		String department_name = request.getParameter("department_name");
		String center_name = request.getParameter("center_name");
		String company_name = request.getParameter("company_name");
		sbf.append(" uc_user a LEFT JOIN uc_department b on a.department=b.department_id");
		sbf.append(" LEFT JOIN   uc_center c on b.department_centerId=c.center_id");
		sbf.append(" LEFT JOIN uc_company d ON d.company_id =b.department_companyId  where 1=1");
		
		if (StringUtils.hasText(company_name)) {
			sbf.append(" and company_name like '%" + company_name + "%'");
		}
		if (StringUtils.hasText(center_name)) {
			sbf.append(" and center_name like '%" + center_name + "%'");
		}
		if (StringUtils.hasText(department_name)) {
			sbf.append(" and department_name like '%" + department_name + "%'");
		}
		
		if (StringUtils.hasText(username)) {
			sbf.append(" and username like '%" + username + "%'");
		}
		if (StringUtils.hasText(userid)) {
			sbf.append(" and userid like '%" + userid + "%'");
		}
		sbf.append(" ORDER BY userid DESC");
		List<Map<String, Object>> data = userService.userList(pageIndex,
				pageSize, record, sbf.toString(), fields.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}

	// 删除用户资料
	@RequestMapping(value = "/deleteContract", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> deleteContract(HttpServletRequest request,
			@RequestParam("type") String type) {
		Map<String, Object> josn = new HashMap<String, Object>();

		String cid = request.getParameter("cid");
		cid = cid.substring(1);
		String[] ids = cid.split("]");
		StringBuffer sbf = new StringBuffer();
		// 删除合同记录
		if ("contract".equals(type)) {
			sbf.append(" where pact_id=" + ids[0]);
			josn.put("where", sbf.toString());
			hregisterService.deleteContract(josn);
			// 删除职位变更记录
		} else if ("hregister".equals(type)) {
			sbf.append(" where job_id=" + ids[0]);
			josn.put("where", sbf.toString());
			hregisterService.deleteHregister(josn);
			// 薪资调整记录
		} else if ("salary".equals(type)) {
			sbf.append(" where salary_id=" + ids[0]);
			josn.put("where", sbf.toString());
			hregisterService.deleteHrSalary(josn);

			// 删除培训记录
		} else if ("record".equals(type)) {
			sbf.append(" where id=" + ids[0]);
			josn.put("where", sbf.toString());
			hregisterService.deleteHrecord(josn);
		}
		return null;
	}
	
	
	/**
	 * 生成树
	*/
	@RequestMapping(value="/userTreeList" , method = RequestMethod.POST)
	@ResponseBody
	public void userTreeList( HttpServletRequest request, HttpServletResponse response ){
		try {
			Map<String, Object> map=new HashMap<String, Object>();
			//公司
		    map.put("where", "uc_company");
		    map.put("what", "*");
			List<Map<String, Object>> companies=orgService.queryData(map);
			//中心
			Map<String,List<Map<String, Object>>> centersMap=new HashMap<String, List<Map<String, Object>>>();
			for (int i = 0; i < companies.size(); i++) {
				String company_id=companies.get(i).get("company_id").toString();
				map.put("where", "uc_center where center_companyId="+company_id+"");
			    map.put("what", "*");
				List<Map<String, Object>> centers=orgService.queryData(map);
				centersMap.put(company_id, centers);
			}
			//部门
			Map<String,List<Map<String, Object>>> departmentMap=new HashMap<String, List<Map<String, Object>>>();
			for (List lists : centersMap.values()) {
				for (int j = 0; j < lists.size(); j++) {
					Map<String, Object> centerMap = (Map<String, Object>)lists.get(j);
					String center_id = centerMap.get("center_id").toString();
					map.put("where", "uc_department where department_centerId="+center_id+"");
				    map.put("what", "*");
					List<Map<String, Object>> departments=orgService.queryData(map);
					departmentMap.put(center_id, departments);
				}
			}
			JSONArray arr = new JSONArray();
			// 一级菜单
			for (int i = 0; i < companies.size(); i++) {
					JSONObject node = new JSONObject();
					int company_id = Integer.valueOf(companies.get(i).get("company_id").toString());
					node.put("id", company_id);
					node.put("name", companies.get(i).get("company_name"));
					JSONArray childrenArr = new JSONArray();
					// 二级菜单
					for (Entry<String, List<Map<String, Object>>> entry : centersMap.entrySet()) {
							if(company_id==Integer.valueOf(entry.getKey())){
								List<Map<String, Object>> list = entry.getValue();
								for (int j = 0; j < list.size(); j++) {
									int center_id = Integer.valueOf(list.get(j).get("center_id").toString());
									JSONObject children = new JSONObject();
									children.put("id", center_id);
									children.put("name", list.get(j).get("center_name"));
									//三级
									JSONArray threeArr = new JSONArray();
									for (Entry<String, List<Map<String, Object>>> depEntry : departmentMap.entrySet()) {
										if(center_id==Integer.valueOf(depEntry.getKey())){
											List<Map<String, Object>> depList = depEntry.getValue();
											for (int o = 0; o < depList.size(); o++) {
												JSONObject threeChildren = new JSONObject();
												threeChildren.put("id", depList.get(o).get("department_id"));
												threeChildren.put("name", depList.get(o).get("department_name"));
												threeArr.add(threeChildren) ;
											}
										}
									}	
									children.put("children",threeArr);
									childrenArr.add(children) ;
								}
							}
					}
					node.put("children", childrenArr);
					arr.add(node);
			}
			response.setCharacterEncoding("UTF-8");
			System.out.println(arr.toString());
			response.getWriter().write(arr.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	
}
