package com.casd.serviceimpl.hr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.casd.dao.hr.HrContractDao;
import com.casd.dao.hr.HrSalaryDao;
import com.casd.dao.hr.HregisterDao;
import com.casd.dao.hr.HtrainingrecordDao;
import com.casd.dao.uc.UserDao;
import com.casd.entity.hr.HrContract;
import com.casd.entity.hr.HrSalary;
import com.casd.entity.hr.Hregister;
import com.casd.entity.hr.Htrainingrecord;
import com.casd.entity.uc.User;
import com.casd.service.hr.HregisterService;

@Service
public class HregisterServiceImpl implements HregisterService{
	  
	@Autowired
	private HrContractDao hrContractDao;
	@Autowired
	private HrSalaryDao hrSalaryDao;
	@Autowired
	private HregisterDao hregisterDao;
	
	@Autowired
	private UserDao  userDao;
	@Autowired
	private HtrainingrecordDao htrainingrecordDao;
	
	
	public Map<String, Object> getAllContrac(String userid) {
		Map<String, Object> param = new HashMap<String, Object>();
		StringBuilder sBuilder=new StringBuilder();
		sBuilder.append(" hr_contract userid where user_id="+userid);
		param.put("fields", "out_stime,start_time,remark,user_id");
		param.put("where", sBuilder.toString());
		
		List<Map<String, Object>> paramss=hrContractDao.selectgetAll(param);
		
		param.put("rows", paramss);
		return param;
		
	}

	@Override
	public void deleteHregister(Map<String, Object> map) {
	  hregisterDao.deleteHregister(map);
		
	}

	@Override
	public void deleteContract(Map<String, Object> map) {
		hrContractDao.deleteContract(map);
		
	}

	@Override
	public void deleteHrSalary(Map<String, Object> map) {
		
		hrSalaryDao.deleteHrSalary(map);
		
	}

	@Override
	public void deleteHrecord(Map<String, Object> map) {
		
		htrainingrecordDao.deleteHrecord(map);
		
	}
	//人员档案录入
	public Map<String, Object> personnelfiles(){
		
		
		
		
		
		return null;
		
	}

	@Override
	@Transactional
	public void savexistence(User user,JSONArray myJsonArray, JSONArray myJsonArray2,JSONArray myJsonArray3,JSONArray myJsonArray4) throws Exception {
		userDao.existence(user);
		
		//是否添加和更新员工变动记录
		List<Hregister> hregistersList=new ArrayList<Hregister>();
		for (int i = 0; i < myJsonArray.size(); i++) {
			Hregister hregister=new Hregister();
			JSONObject myjObject = myJsonArray.getJSONObject(i);
			String job_id = ((myjObject.getString("job_id").isEmpty() ? String
					.valueOf("0") : myjObject.getString("job_id")));
			
			hregister.setJob_id(Integer.parseInt(job_id));
			hregister.setBegin_date(myjObject.getString("begin_date"));
			hregister.setEnd_date(myjObject.getString("end_date"));
			hregister.setCorporate_name(myjObject.getString("corporate_name"));
		
			hregister.setJob_name(myjObject.getString("job_name"));
			hregister.setReason(myjObject.getString("reason"));
			hregister.setUser_id(user.getUserid());
			hregistersList.add(hregister);
		}
		for(int i = 0; i < hregistersList.size(); i++){
			hregisterDao.addHregisters(hregistersList.get(i));
		}
		
		//是否添加和更新培训记录
				List<Htrainingrecord> hrdList=new ArrayList<Htrainingrecord>();
				for (int i = 0; i < myJsonArray2.size(); i++) {
					Htrainingrecord hrd=new Htrainingrecord();
					
					JSONObject myjObject2 = myJsonArray2.getJSONObject(i);
					String cid = ((myjObject2.getString("id").isEmpty() ? String
							.valueOf("0") : myjObject2.getString("id")));
					
				     hrd.setId(Integer.parseInt(cid));
				     hrd.setUser_id(user.getUserid());
                     hrd.setBegin_date(myjObject2.getString("begin_date"));
                     hrd.setEnd_date(myjObject2.getString("end_date"));
                     hrd.setTrain_theme(myjObject2.getString("train_theme"));
                     hrd.setTrain_mechanism(myjObject2.getString("train_mechanism"));
                     hrd.setCertifications(myjObject2.getString("certifications"));
                     hrdList.add(hrd);

				}
				for(int i = 0; i < hrdList.size(); i++){
					htrainingrecordDao.insertRecord(hrdList.get(i));
				}
				
				//是否添加和更新薪资调整
				List<HrSalary> hsyList=new ArrayList<HrSalary>();
				for (int i = 0; i < myJsonArray3.size(); i++) {
					HrSalary hsy=new HrSalary();
					
					JSONObject myjObject3 = myJsonArray3.getJSONObject(i);
					String salary_id = ((myjObject3.getString("salary_id").isEmpty() ? String
							.valueOf("0") : myjObject3.getString("salary_id")));
					
					hsy.setSalary_id(Integer.parseInt(salary_id));
					hsy.setAdjustment_time(myjObject3.getString("adjustment_time"));
					hsy.setOriginal_salary(myjObject3.getString("original_salary"));
					hsy.setAdjusted_salary(myjObject3.getString("adjusted_salary"));
					hsy.setReason(myjObject3.getString("reason"));
					hsy.setNote_taker(myjObject3.getString("note_taker"));
					hsy.setUser_id(user.getUserid());
					hsyList.add(hsy);

				}
				for(int i = 0; i < hsyList.size(); i++){
					hrSalaryDao.addSalary(hsyList.get(i));

                  	}

				//是否添加和更新合同
				List<HrContract> hctList=new ArrayList<HrContract>();
				for (int i = 0; i < myJsonArray4.size(); i++) {
					HrContract hct=new HrContract();
					
					JSONObject myjObject4 = myJsonArray4.getJSONObject(i);
					String pact_id = ((myjObject4.getString("pact_id").isEmpty() ? String
							.valueOf("0") : myjObject4.getString("pact_id")));
					
				     hct.setPact_id(Integer.parseInt(pact_id));
				     hct.setStart_time(myjObject4.getString("start_time"));
				     hct.setOut_stime(myjObject4.getString("out_stime"));
				     hct.setRemark(myjObject4.getString("remark"));
				     hct.setUser_id(user.getUserid());
				     hctList.add(hct);

				}
				for(int i = 0; i < hctList.size(); i++){
			       hrContractDao.insertContract(hctList.get(i));

                  	}

	}

}
