package com.casd.controller.personManagem;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipInputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.activiti.bpmn.model.BpmnModel;
import org.activiti.engine.HistoryService;
import org.activiti.engine.ProcessEngine;
import org.activiti.engine.ProcessEngineConfiguration;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricActivityInstance;
import org.activiti.engine.history.HistoricProcessInstance;
import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
import org.activiti.engine.impl.context.Context;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.PvmTransition;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.repository.Deployment;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.activiti.image.ProcessDiagramGenerator;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.entity.uc.User;
import com.casd.service.construct.PurchaseService;
import com.casd.service.hr.ActivitiService;
import com.casd.service.uc.UserService;

@Controller
@RequestMapping("/admin")
public class ActivitiControllers {

	@Autowired
	private ActivitiService activitiService;
	@Autowired
	private TaskService taskService;
	@Autowired
	private RuntimeService runtimeService;
	@Autowired
	private ProcessEngine processEngine;

	@Autowired
	private PurchaseService purchaseService;
	
	@Autowired
	private RepositoryService repositoryService;

	@Autowired
	private UserService userService;
	
	@Autowired
	private HistoryService historyService;
	 @Autowired
    private  ProcessEngineConfiguration processEngineConfiguration;
	/**
	 * 查询任务列表
	 * 
	 * 
	 * */
	@RequestMapping(value = "/findTaskList", method = RequestMethod.GET)
	public ModelAndView findTaskList(HttpServletRequest request,Model model) {
		ModelAndView mv = new ModelAndView();
		String typeName=billType(request);
		if (typeName.equals("采购申请")) {
			mv.setViewName("ownCenter/taskListMatPur");
		}else {
			mv.setViewName("personManagem/findTaskList");
		}
		return mv;
	}

	
	private String billType(HttpServletRequest request) {
		Enumeration<String> parameterNames = request.getParameterNames();
		String typeName="";
		for(Enumeration e=parameterNames;e.hasMoreElements();){
		      String thisName=e.nextElement().toString();
		      if(thisName.equals("type")){
		    	  typeName=request.getParameter(thisName);
		      }
		}
		
		return typeName;
	}
	
	private Map<String, Object> billData(String typeName,String billId) {
		Map<String, Object> data=new HashMap<String, Object>();
		if (typeName.equals("采购申请")) {

			String bizkey = activitiService.getBusinessBizId(billId);// 获取业务编号

			String[] strs = bizkey.split("\\.");
			String bizId = null; // 业务编号
			for (int i = 0, len = strs.length; i < len; i++) {
				bizId = strs[i].toString();
			}
			data = purchaseService.headData_Audit(Integer.valueOf(bizId));
			
		}
		
		return data;
	}
	
	
	/***
	 * 查询任务列表
	 * 
	 * @param 获选人查询
	 *            taskCandidateUser
	 * @param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/findTaskList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> findTaskList(HttpServletRequest request)
			throws Exception {

		User user = (User) request.getSession().getAttribute("loginUser");
		String username = user.getUsername();
		
		String typeName=billType(request);
		
		List<Map<String, Object>> levaList = new ArrayList<Map<String, Object>>();
		Map<String, Object> json = new HashMap<String, Object>();

		String userid = user.getUserid() + "";
		/*
		 * List<Task> list =
		 * taskService.createTaskQuery().taskCandidateOrAssigned(username) //
		 * .taskCandidateUser(username) .list(); //查询获选人
		 */
		List<Task> list = taskService.createTaskQuery()
				.taskCandidateOrAssigned(userid).orderByTaskCreateTime().desc()	
				// .taskCandidateUser(username)
				.list(); // 查询获选人
		/*List<Task> list2 = taskService.createTaskQuery()
                .taskCandidateOrAssigned("54").active().orderByTaskId().desc().list();*/
		// 已经签收的任务
		/*
		 * List<Task> todoList
		 * =taskService.createTaskQuery().taskAssignee(username
		 * ).active().list(); for (Task task : todoList) { Map<String, Object>
		 * singleTask = packageTaskInfo(task); singleTask.put("assignee",
		 * task.getAssignee()); //办理人为当前yonghu singleTask.put("status","claim");
		 * levaList.add(singleTask); }
		 */

		// 等待签收的任务
		/*
		 * List<Task> toClaimList =
		 * taskService.createTaskQuery().taskCandidateUser
		 * (username).active().list(); for (Task task : toClaimList) {
		 * 
		 * Map<String, Object> singleTask = packageTaskInfo(task);
		 * singleTask.put("assignee",task.getAssignee()); //办理人为当前yonghu
		 * singleTask.put("status", "claim"); levaList.add(singleTask); }
		 */

		// taskService.claim("75060", "李新华");

		int count = (int) taskService.createTaskQuery()
				.taskCandidateUser(userid).count();

		if (list != null && list.size() > 0) {
			for (Task task : list) {
				Map<String, Object> map = new HashMap<String, Object>();
				String title = runtimeService.getVariable(
						task.getExecutionId(), "title").toString();	
		      String url=task.getFormKey();
				if(!typeName.equals("")&&title.equals(typeName)){	
					if (url==null) {
						url=task.getId()+".do";
					}
					map=billData(typeName, task.getId());
					map.put("taskid", task.getId()); // 任务id
					map.put("name", task.getName()); // 任务名称
					map.put("createTime", task.getCreateTime()); // 创建时间
					map.put("assignee", username); // 办理人为当前yonghu
					map.put("url", url); // 当前任务路径
					map.put("title", title); // 流程标题
					map.put("processInstanceId", task.getProcessInstanceId()); // 流程实例id
					map.put("taskdefkey", task.getTaskDefinitionKey()); // 流程activityId
					levaList.add(map);
	
				}else if (typeName=="") {
					
					if (url==null) {
						url=task.getId()+".do";
					}
					
					map.put("taskid", task.getId()); // 任务id
					map.put("name", task.getName()); // 任务名称
					map.put("createTime", task.getCreateTime()); // 创建时间
					map.put("assignee", username); // 办理人为当前yonghu
					map.put("url",  url); // 当前任务路径

					map.put("title", title); // 流程标题
					map.put("processInstanceId", task.getProcessInstanceId()); // 流程实例id
					map.put("taskdefkey", task.getTaskDefinitionKey()); // 流程activityId
					levaList.add(map);
				}
				
			
				
				/*
				 * System.out.println("任务ID：" + task.getId());
				 * System.out.println("任务名称：" + task.getName());
				 * System.out.println("任务创建时间：" + task.getCreateTime());
				 * System.out.println("任务的办理人：" + task.getAssignee());
				 * System.out.println("流程实例ID：" + task.getProcessInstanceId());
				 * System.out.println("执行对像ID：" + task.getExecutionId());
				 * System.out.println("流程定义ID：" +
				 * task.getProcessDefinitionId()); System.out.println("任务id：" +
				 * task.getId() + "\n" + task.getDescription() + "\n" +
				 * task.getCategory() + "\n" + task.getExecutionId() + "\n" +
				 * task.getFormKey() + "\n" + task.getOwner() + "\n" +
				 * task.getParentTaskId() + "\n" + task.getPriority() + "\n" +
				 * task.getProcessDefinitionId() + "\n" +
				 * task.getProcessInstanceId() + "\n" +
				 * task.getTaskDefinitionKey() + "\n" + task.getTenantId() +
				 * "\n" + task.getCreateTime() + "\n" +
				 * task.getProcessVariables() + "\n" +
				 * task.getTaskLocalVariables() + "\n" + task.getAssignee() +
				 * ""); System.out.println(task.getFormKey() + "ssss" +
				 * task.getProcessDefinitionId() + task.getOwner()); Map<String,
				 * Object> ma = new HashMap<String, Object>();
				 */
				// taskService.claim("75060", "应小兰");
				// ma.put("sign", "true");
				// taskService//与正在执行的任务管理相关的Service
				// .complete(task.getId(),ma);
				// List<IdentityLink> sdsString=
				// taskService.getIdentityLinksForTask(task.getId());
				// activitiService.backTaskTab(task.getId());
				// purchaseService.fidbusiness();

				/*map.put("taskid", task.getId()); // 任务id
				map.put("name", task.getName()); // 任务名称
				map.put("createTime", task.getCreateTime()); // 创建时间
				map.put("assignee", username); // 办理人为当前yonghu
				map.put("url", task.getFormKey()); // 当前任务路径

				map.put("title", title); // 流程标题
				map.put("processInstanceId", task.getProcessInstanceId()); // 流程实例id

				levaList.add(map);
*/
			}
			json.put("rows", levaList);
			json.put("total", count);
		} else {
			json.put("rows", "");
			json.put("total", 0);
		}

		return json;

	}

	// 获取参数
	@SuppressWarnings("unused")
	private Map<String, Object> packageTaskInfo(Task task) {
		Map<String, Object> singleTask = new HashMap<String, Object>();

		String title = runtimeService.getVariable(task.getExecutionId(),
				"title").toString();
		singleTask.put("taskid", task.getId()); // 任务id
		singleTask.put("name", task.getName()); // 任务名称
		singleTask.put("createTime", task.getCreateTime()); // 创建时间

		singleTask.put("url", task.getFormKey()); // 当前任务路径

		singleTask.put("title", title); // 流程标题
		singleTask.put("processInstanceId", task.getProcessInstanceId()); // 流程实例id

		return singleTask;
	}

	/***
	 * 查询历史记录
	 * 
	 * */
	@RequestMapping(value = "/historyTaskList", method = RequestMethod.GET)
	public ModelAndView historyTaskList() {
		ModelAndView mv = new ModelAndView();

		mv.setViewName("personManagem/historyTaskList");
		return mv;
	}

	// 查询历史记录
	@RequestMapping(value = "/historyTaskList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> historyTaskList(HttpServletRequest request)
			throws Exception {

		Ref<Integer> record = new Ref<Integer>();

		StringBuilder sbf = new StringBuilder();// 拼接sql
		User user = (User) request.getSession().getAttribute("loginUser");
		String processInstanceId = request.getParameter("processInstanceId");
		String userid = user.getUserid() + "";
		String username = user.getUsername() + "";
		StringBuilder fields = new StringBuilder();// 需要显示字段
		fields.append(" htt.PROC_INST_ID_,htt.NAME_,rdt.NAME_ rdtName,hpt.BUSINESS_KEY_,htt.START_TIME_,htt.END_TIME_");
		fields.append(",hpt.DELETE_REASON_");
		Map<String, Object> json = new HashMap<String, Object>();
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;

		sbf.append("act_hi_taskinst htt");
		sbf.append(" LEFT JOIN  ACT_HI_PROCINST hpt ON htt.PROC_INST_ID_ = hpt.PROC_INST_ID_");
		sbf.append(" LEFT JOIN act_re_procdef rpf ON hpt.PROC_DEF_ID_=rpf.ID_");
		sbf.append(" LEFT JOIN act_re_deployment rdt on rpf.DEPLOYMENT_ID_=rdt.ID_");

		sbf.append(" WHERE htt.ASSIGNEE_ =" + userid );
		if (StringUtils.isNoneBlank(processInstanceId)) {
			sbf.append(" and htt.PROC_INST_ID_=" + processInstanceId);
		}

		List<Map<String, Object>> data = userService.userList(pageIndex,
				pageSize, record, sbf.toString(), fields.toString());

		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}

	/**
	 * @author mr liao 签收任务
	 * 
	 * */
	/*
	 * @RequestMapping(value = "/taskclaim", method = RequestMethod.GET)
	 * 
	 * @ResponseBody public Object taskclaim(@Param("taskid") String
	 * taskid,Model model,HttpSession session, RedirectAttributes
	 * redirectAttributes) { Map<String, Object> json= new HashMap<String,
	 * Object>(); try { User user =(User)session.getAttribute("loginUser");
	 * String username=user.getUsername();
	 * 
	 * // taskService.claim(taskid,username);
	 * 
	 * json.put("Success", true); json.put("Msg", "已签收"); } catch (Exception e)
	 * { json.put("Msg", "签收失败"); json.put("Success", false);
	 * 
	 * }
	 * 
	 * 
	 * 
	 * return json;
	 * 
	 * }
	 */

	/***
	 * 部署流程
	 * 
	 * */
	@RequestMapping(value = "/deploymentProcessDefinition_zip", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> deploymentProcessDefinition_zip(
			MultipartFile file, String fileName) throws IOException {
		Map<String, Object> json = new HashMap<String, Object>();
		InputStream fis = null;
		ZipInputStream zipInputStream = null;
		try {
			fileName = file.getOriginalFilename(); // 文件名
			String newfileName = fileName.substring(0,
					fileName.lastIndexOf('.')); // 截取名 newfileName
			MultipartFile cf = (MultipartFile) file;
			fis = cf.getInputStream();
			
			zipInputStream = new ZipInputStream(fis);
			Deployment deployment = processEngine.getRepositoryService()// 与流程定义和部署对象相关的Service
					.createDeployment()// 创建一个部署对象
					.name(newfileName)// 添加部署的名称
					.addZipInputStream(zipInputStream)// 指定zip格式的文件完成部署
					.deploy();// 完成部署
			json.put("Success", true);
			json.put("Msg", "部署成功");
		} catch (Exception e) {
			e.printStackTrace();
			json.put("Success", false);
			json.put("Msg", "部署失败");
		} finally {
			// 关闭流
			zipInputStream.close();
			fis.close();
		}

		return json;
	}

	/***
	 * 删除流程实例
	 * 
	 * */
	@RequestMapping(value = "/deleteProcessInstance", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> deleteProcessInstance(String processInstanceId) {

		Map<String, Object> json = new HashMap<String, Object>();
		try {
			runtimeService.deleteProcessInstance(processInstanceId, "删除原因");
			json.put("Success", true);
			json.put("Msg", "删除成功");
		} catch (Exception ex) {
			ex.printStackTrace();
			json.put("Success", false);
			json.put("Msg", "程序出错");
		}
		return json;
	   }

	
	
	
	/*   *//**
     * 读取带跟踪的图片
     *//*
    @RequestMapping(value = "/personManagem_s")
    public void readResource( String processInstanceId, HttpServletResponse response)
            throws Exception {
     processInstanceId="627501";
        //获取历史流程实例
        HistoricProcessInstance processInstance =  historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();
        //获取流程图
        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());
        processEngineConfiguration = processEngine.getProcessEngineConfiguration();
        Context.setProcessEngineConfiguration((ProcessEngineConfigurationImpl) processEngineConfiguration);

        ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();
        ProcessDefinitionEntity definitionEntity = (ProcessDefinitionEntity)repositoryService.getProcessDefinition(processInstance.getProcessDefinitionId());

        List<HistoricActivityInstance> highLightedActivitList =  historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstanceId).list();
        //高亮环节id集合
        List<String> highLightedActivitis = new ArrayList<String>();
        //高亮线路id集合
        List<String> highLightedFlows = getHighLightedFlows(definitionEntity,highLightedActivitList);

        for(HistoricActivityInstance tempActivity : highLightedActivitList){
            String activityId = tempActivity.getActivityId();
            highLightedActivitis.add(activityId);
        }

        //中文显示的是口口口，设置字体就好了
        InputStream imageStream = diagramGenerator.generateDiagram(bpmnModel, "png", highLightedActivitis,highLightedFlows,"宋体","宋体",null,1.0);
        //单独返回流程图，不高亮显示
//        InputStream imageStream = diagramGenerator.generatePngDiagram(bpmnModel);
        // 输出资源内容到相应对象
        byte[] b = new byte[1024];
        int len;
        while ((len = imageStream.read(b, 0, 1024)) != -1) {
            response.getOutputStream().write(b, 0, len);
        }

  
        }
    
    
    private List<String> getHighLightedFlows(
            ProcessDefinitionEntity processDefinitionEntity,
            List<HistoricActivityInstance> historicActivityInstances) {
        List<String> highFlows = new ArrayList<String>();// 用以保存高亮的线flowId
        for (int i = 0; i < historicActivityInstances.size() - 1; i++) {// 对历史流程节点进行遍历
            ActivityImpl activityImpl = processDefinitionEntity
                    .findActivity(historicActivityInstances.get(i)
                            .getActivityId());// 得到节点定义的详细信息
            List<ActivityImpl> sameStartTimeNodes = new ArrayList<ActivityImpl>();// 用以保存后需开始时间相同的节点
            ActivityImpl sameActivityImpl1 = processDefinitionEntity
                    .findActivity(historicActivityInstances.get(i + 1)
                            .getActivityId());
            // 将后面第一个节点放在时间相同节点的集合里
            sameStartTimeNodes.add(sameActivityImpl1);
            for (int j = i + 1; j < historicActivityInstances.size() - 1; j++) {
                HistoricActivityInstance activityImpl1 = historicActivityInstances
                        .get(j);// 后续第一个节点
                HistoricActivityInstance activityImpl2 = historicActivityInstances
                        .get(j + 1);// 后续第二个节点
                if (activityImpl1.getStartTime().equals(
                        activityImpl2.getStartTime())) {
                    // 如果第一个节点和第二个节点开始时间相同保存
                    ActivityImpl sameActivityImpl2 = processDefinitionEntity
                            .findActivity(activityImpl2.getActivityId());
                    sameStartTimeNodes.add(sameActivityImpl2);
                } else {
                    // 有不相同跳出循环
                    break;
                }
            }
            List<PvmTransition> pvmTransitions = activityImpl
                    .getOutgoingTransitions();// 取出节点的所有出去的线
            for (PvmTransition pvmTransition : pvmTransitions) {
                // 对所有的线进行遍历
                ActivityImpl pvmActivityImpl = (ActivityImpl) pvmTransition
                        .getDestination();
                // 如果取出的线的目标节点存在时间相同的节点里，保存该线的id，进行高亮显示
                if (sameStartTimeNodes.contains(pvmActivityImpl)) {
                    highFlows.add(pvmTransition.getId());
                }
            }
        }
        return highFlows;
    }*/

    
}