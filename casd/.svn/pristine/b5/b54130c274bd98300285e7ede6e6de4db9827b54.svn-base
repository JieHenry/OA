package com.casd.controller.ownCenter;

import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.entity.flow.FlowAudit;
import com.casd.entity.ownCenter.Leave;
import com.casd.entity.uc.User;
import com.casd.service.flow.FlowService;
import com.casd.service.ownCenter.LeaveService;
import com.casd.service.uc.RoleService;
import com.casd.service.uc.UserService;

@Controller
@RequestMapping("/admin")
public class LeaveController {

	@Autowired
	private FlowService flowService;
	@Autowired
	private LeaveService leaveService;
	@Autowired
	private UserService userService;
	@Autowired
	private RoleService roleService;

	/**
	 * 请假记录表
	 */
	@RequestMapping(value = "/leaveList", method = RequestMethod.GET)
	public ModelAndView leaveList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("personManagem/leaveList");
		return mv;
	}

	@RequestMapping(value = "/leaveList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> leaveList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		sbf.append(" own_leave_table where 1=1");

		String start_time = request.getParameter("start_time");
		String end_time = request.getParameter("end_time");
		String department = request.getParameter("department");
		String applicant = request.getParameter("applicant");
		String status = request.getParameter("status");

		SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd");
		if (StringUtils.hasText(start_time)) {
			java.util.Date start_timeDate = format.parse(start_time);
			Date startDate = new Date(start_timeDate.getTime());
			sbf.append(" and start_time >='" + startDate + "'");
		}
		if (StringUtils.hasText(end_time)) {
			java.util.Date end_timeDate = format.parse(end_time);
			Date endDate = new Date(end_timeDate.getTime());
			sbf.append(" and end_time <= '" + endDate + "'");
		}
		if (StringUtils.hasText(department)) {
			sbf.append(" and department = '" + department + "'");
		}
		if (StringUtils.hasText(applicant)) {
			sbf.append(" and applicant = '" + applicant + "'");
		}
		if (StringUtils.hasText(status)) {
			sbf.append(" and status = " + status + "");
		}
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;

		List<Map<String, Object>> data = leaveService.leaveList(pageIndex,
				pageSize, record, sbf.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}

	/**
	 * 填写请假条页面
	 * 
	 * @throws Exception
	 */

	@RequestMapping(value = "/leave", method = RequestMethod.GET)
	public ModelAndView leave(HttpServletRequest request, Model mode)
			throws Exception {
		ModelAndView mv = new ModelAndView();

		User loginUser = (User) request.getSession().getAttribute("loginUser");
		String fields = "a.username,b.role_name";

		StringBuffer sbf = new StringBuffer();
		sbf.append("uc_user a JOIN uc_role b ON a.role_id=b.role_id");
		sbf.append(" where a.userid=" + loginUser.getUserid());
		List<Map<String, Object>> list = userService.queryId(fields,
				sbf.toString());
		Leave leave = new Leave();
		for (Map<String, Object> map : list) {

			leave.setApplicant(map.get("username").toString());
			leave.setPosition(map.get("role_name").toString());

		}

		mv.addObject("leave", leave);

		mv.setViewName("personManagem/leave");
		return mv;
	}

	/**
	 * 查询流程节点的审批人
	 * 
	 * */
	@RequestMapping(value = "/choice_examine", method = RequestMethod.GET)
	@ResponseBody
	public List<Map<String, Object>> choice_examine(HttpServletRequest request) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<Map<String, Object>> auditorList = null;
		User user = (User) request.getSession().getAttribute("loginUser");

		int userenString = user.getUserid();
		String fields = "b.role_name";
		StringBuffer sbf = new StringBuffer();
		sbf.append(" uc_user a JOIN uc_role b on a.role_id =b.role_id");
		sbf.append(" WHERE a.userid=" + userenString);
		map.put("fields", fields);
		map.put("where", sbf);

		Map<String, Object> params = roleService.findById(map);
		String str = params.get("role_name").toString();

		// 经理请假
		if (str.contains("经理") || str.equals("admin")) {
			String codeString = "leave003";
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("code", codeString);
			paramMap.put("order", 1);
			auditorList = flowService.getAuditors(paramMap);

		} else {
			Integer day_count = Integer.parseInt(request
					.getParameter("day_count"));
			// 普通员工请假并且不超过三天
			if (day_count <= 3) {
				String codeString = "leave002";
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("code", codeString);
				paramMap.put("order", 1);
				auditorList = flowService.getAuditors(paramMap);
				// 普通员工请假并且超过三天
			} else {
				String codeString = "leave001";
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("code", codeString);
				paramMap.put("order", 1);
				auditorList = flowService.getAuditors(paramMap);
			}

		}

		return auditorList;

	}

	@RequestMapping(value = "initFlow", method = RequestMethod.POST)
	@ResponseBody
	private JSONObject initFlow(HttpServletRequest request, Model model) {
		String flow_id = "";
		JSONObject jsonObject = new JSONObject();

		int day_count = Integer.valueOf(request.getParameter("day_count"));
		if (day_count > 3) {
			flow_id = "1";
		} else {
			flow_id = "2";
		}
		User loginUser = (User) request.getSession().getAttribute("loginUser");
		String username = loginUser.getUsername();
		List<Map<String, Object>> flow = flowService
				.initFlow(username, flow_id);
		jsonObject.put("flow", flow);
		jsonObject.put("userName", username);
		return jsonObject;
	}

	/**
	 * 提交请假申请
	 */
	@RequestMapping(value = "save_Leave", method = RequestMethod.POST)
	@ResponseBody
	private Map<String, Object> submitLeave(Leave leave,
			HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String username = request.getParameter("username");
           
			Map<String, Object> linkMap = new HashMap<String, Object>();

			linkMap.put("auditor", username); // 审批人
			linkMap.put("flow_submitter", leave.getApplicant()); // 申请人
			linkMap.put("flow_bill_url", "leaveAudit.do");// 审核界面url
			linkMap.put("status", 2);
			String position=leave.getPosition();
			if (position.contains("经理") || position.equals("admin")) {
				linkMap.put("flow_bill_type", "经理请假");
			}else {
			      int day_count=	Integer.parseInt(leave.getDay_count());
			      //请假天数不超过三天
			   if (day_count <= 3) {
				   linkMap.put("flow_bill_type", "员工请假1");
				
			  }else {
				 linkMap.put("flow_bill_type", "员工请假2");
			}
			}
			
			leaveService.saveLeave(leave, linkMap);

		} catch (Exception e) {
			map.put("msg", "系统程序出错，请联系技术人员!");
		}

		return map;
	}

	/**
	 * 跳转到请假条审核界面 leaveAudit.jsp
	 */

	@RequestMapping(value = "/leaveAudit", method = RequestMethod.GET)
	public ModelAndView leaveAudit(HttpServletRequest request, Model model) {
		ModelAndView mv = new ModelAndView();
		String bill_id = request.getParameter("flow_bill_id");// 获取单据id

		int flow_node_order = Integer.parseInt(request.getParameter(
				"flow_node_order").toString());// 流程节点

		String flow_bill_url = request.getParameter("flow_bill_url");// 路程路径
		String bill_type = request.getParameter("bill_type");// 流程类型
		int auditID = Integer.parseInt(request.getParameter("auditID")
				.toString());// 流程id

		int flow_status = Integer.parseInt(request.getParameter("flow_status")
				.toString());// 流程状态
		int flow_audit_next_auditid = Integer.parseInt(request.getParameter(
				"flow_audit_next_auditid").toString());
		int flow_audit_last_auditid = Integer.parseInt(request.getParameter(
				"flow_audit_last_auditid").toString());

		// 传参到请假单审核页面
		mv.addObject("auditID", auditID);
		mv.addObject("flow_status", flow_status);
		mv.addObject("flow_audit_next_auditid", flow_audit_next_auditid);
		mv.addObject("flow_audit_last_auditid", flow_audit_last_auditid);
		mv.addObject("flow_node_order", flow_node_order);

		// 查询请假信息
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id", bill_id);
		Leave leave = leaveService.findLeaveByID(map);
		mv.addObject("leave", leave);

		// 查询审核人
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		if (bill_type.equals("经理请假")) {
			paramMap.put("code", "leave003");
		}else if(bill_type.equals("员工请假1")){
			paramMap.put("code", "leave002");
		}else {
			paramMap.put("code", "leave001");
		}
		
		paramMap.put("order", flow_node_order);
		List<Map<String, Object>> auditorList = flowService
				.getAuditors(paramMap);
		mv.addObject("size", auditorList.size());

		mv.addObject("auditor", auditorList);
		
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("flow_bill_id", bill_id);
		param.put("flow_bill_url", "leaveAudit.do");			
		List<Map<String, Object>> listsMaps= flowService.getAuditOption(param);
	
		model.addAttribute("listsMaps", listsMaps);
		/* String bill_url=request.getParameter("flow_bill_url"); */
		mv.setViewName("personManagem/leaveAudit");
		return mv;
	}

	/**
	 * 跳转查看界面
	 */

	@RequestMapping(value = "/leaveView", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView leaveView(HttpServletRequest request, Model model) {
		ModelAndView mv = new ModelAndView();
	
	
		int bill_id = Integer.parseInt(request.getParameter("id").toString());

		// 查询请假信息
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id", bill_id);
		Leave leave = leaveService.findLeaveByID(map);
		mv.addObject("leave", leave);

		
		
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("flow_bill_id", bill_id);
		param.put("flow_bill_url", "leaveAudit.do");			
		List<Map<String, Object>> listsMaps= flowService.getAuditOption(param);
		model.addAttribute("listsMaps", listsMaps);
		mv.setViewName("personManagem/leaveView");
		return mv;
	}

	/**
	 * 请假条取消
	 */
	@RequestMapping(value = "/cancelLeave", method = RequestMethod.POST)
	@ResponseBody
	public String cancelLeave(HttpServletRequest request, Model model) {
		Map<String, Object> map = new HashMap<String, Object>();
		String leaveId = request.getParameter("leaveId");
		// leaveId=leaveId.substring(1);
		// String[] ids=leaveId.split("]");
		// map.put("what",ids[0]);
		map.put("what", leaveId);
		map.put("where", "own_leave_table");
		return leaveService.cancelLeave(map);
	}

	/**
	 * 请假条删除
	 */
	@RequestMapping(value = "/deleLeave", method = RequestMethod.POST)
	@ResponseBody
	public String deleLeave(HttpServletRequest request, Model model) {
		Map<String, Object> map = new HashMap<String, Object>();
		String leaveId = request.getParameter("leaveId");
		leaveId = leaveId.substring(1);
		String[] ids = leaveId.split("]");
		map.put("what", ids[0]);
		map.put("where", "own_leave_table");
		leaveService.deleLeave(map);
		return null;
	}

	/**
	 * 请假条审核
	 */
	@RequestMapping(value = "/auditLeave", method = RequestMethod.POST)
	@ResponseBody
	public String auditLeave(HttpServletRequest request, Model model) {
		Map<String, Object> map = new HashMap<String, Object>();
		String billID = request.getParameter("id");
		String option = request.getParameter("option");
		int auditID = Integer.valueOf(request.getParameter("auditID"));

		map.put("billID", billID);
		map.put("option", option);
		map.put("auditID", auditID);
		map.put("where", "flow_audit_table");
		// int nextNode=flowService.auditBill(map);
		/*
		 * map.put("nextNode",nextNode);
		 * if(nextNode==0){//下一个审核节点为0则说明不存在,此节点是最后一个,更新单据状态为已核准
		 * leaveService.updateStatus(map); }
		 */
		return null;
	}

	/**
	 * 方法说明：请假条驳回功能
	 */
	@RequestMapping(value = "/leave_reject", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> leave_reject(HttpServletRequest request) {
		Map<String, Object> jsonMap=new HashMap<String, Object>();
		Map<String, Object> map=new HashMap<String, Object>();
		try {
			
		
		String option =request.getParameter("option");
		String auditID =request.getParameter("auditID");
		String flow_audit_last_auditid =request.getParameter("flow_audit_last_auditid");
		String flow_node_order = request.getParameter("flow_node_order");
        String flow_bill_id =request.getParameter("leave_id");
		map.put("flow_audit_last_auditid",flow_audit_last_auditid);

		map.put("option",option);
		map.put("auditID",auditID);
	
	    map.put("where", "flow_audit_table");
	    
	    map.put("billID", flow_bill_id);
	    map.put("node_order", flow_node_order);
	    leaveService.leave_reject(map);
		} catch (Exception e) {
		jsonMap.put("msg", "驳回失败,您的操作有误！");
		}
		return jsonMap;
	}

	/**
	 * 个人中心的请假list
	 */
	@RequestMapping(value = "/leavePersonal", method = RequestMethod.GET)
	public ModelAndView leavePersonal(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("personManagem/leavePersonal");
		return mv;
	}

	@RequestMapping(value = "/leavePersonal", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> leavePersonal(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		User loginUser = (User) request.getSession().getAttribute("loginUser");
		String username = loginUser.getUsername();
		sbf.append(" own_leave_table where applicant='" + username + "'");

		String start_time = request.getParameter("start_time");
		String end_time = request.getParameter("end_time");

		SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd");
		if (StringUtils.hasText(start_time)) {
			java.util.Date start_timeDate = format.parse(start_time);
			Date startDate = new Date(start_timeDate.getTime());
			sbf.append(" and start_time >='" + startDate + "'");
		}
		if (StringUtils.hasText(end_time)) {
			java.util.Date end_timeDate = format.parse(end_time);
			Date endDate = new Date(end_timeDate.getTime());
			sbf.append(" and end_time <= '" + endDate + "'");
		}

		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;

		List<Map<String, Object>> data = leaveService.leaveList(pageIndex,
				pageSize, record, sbf.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}

	/**
	 * 请假条审核通过
	 * */
	@RequestMapping(value = "/leave_pass", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> leave_pass(HttpServletRequest request) {
    
		
		Map<String, Object> jsonMap=new HashMap<String, Object>();
		try {		
		String leave_id = request.getParameter("leave_id");
		String auditor = request.getParameter("auditor");
		String flow_node_order = request.getParameter("flow_node_order");
		String option = request.getParameter("option");
		String auditID = request.getParameter("auditID");
		String size = request.getParameter("size");
		String bill_type = request.getParameter("bill_type");

		Map<String, Object> map = new HashMap<String, Object>();

		map.put("billID", leave_id);
		map.put("auditor", auditor);
		map.put("option", option);
		map.put("auditID", auditID);
		map.put("flow_node_order", flow_node_order);
		map.put("where", "flow_audit_table");
		map.put("size", size);
		map.put("bill_type", bill_type);

		leaveService.leave_pass(map);

		
		} catch (Exception e) {
			jsonMap.put("msg","操作有误，请联系技术员！");
		}

		return jsonMap;

	}
	
	
	

}
