package com.casd.controller.supplierMod;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.entity.construct.ApartyPur;
import com.casd.entity.supplierMod.Worker;
import com.casd.entity.supplierMod.WorkerApply;
import com.casd.entity.uc.User;
import com.casd.service.checkBox.CheckBoxService;
import com.casd.service.construct.ConstructService;
import com.casd.service.hr.ActivitiService;
import com.casd.service.supplierMod.WorkerService;
import com.casd.service.uc.UserService;


@Controller
@RequestMapping("/admin")
public class WorkerController {
	
	@Autowired
	private ConstructService constructService;
	@Autowired
	private CheckBoxService checkBoxService;
	
	@Autowired
	private WorkerService workerService;
	
	@Autowired
	private UserService userService;
	
	
	@Autowired
	private ActivitiService activitiService;
	/**
	 * 班组list
	 */
	@RequestMapping(value = "/workerConList", method = RequestMethod.GET)
	public ModelAndView aPartyConList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("supplierMod/workerConList");
		return mv;
	}

	@RequestMapping(value = "/workerConList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerConList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		User loginUser = (User) request.getSession().getAttribute("loginUser");
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		
		sbf.append(" construct_project_table pro left join construct_project_dep dep on dep.constuct_project_dep_id=pro.construct_project_dep   ");
		sbf.append(" LEFT JOIN construct_project_workteam team  on  pro.construct_project_id =team.construct_project_workTeam_projectId  ");
		sbf.append(" left join uc_user us on us.userid = team.construct_project_workTeam_userId  ");
		sbf.append(" where  dep.constuct_project_dep_company=1 ");
		sbf.append(" and  pro.construct_project_leader='"+loginUser.getUsername()+"' ");
		String construct_project_name = request.getParameter("construct_project_name");
		if (StringUtils.hasText(construct_project_name)) {
			sbf.append(" and pro.construct_project_name like '%" + construct_project_name
					+ "%'");
		}
		
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		
		List<Map<String, Object>> data = constructService.constructList(
				pageIndex, pageSize, record, sbf.toString());
		
		if (data.size()==0) {
			
			StringBuffer sbf2 = new StringBuffer();
			
			sbf2.append(" construct_project_workteam team LEFT  JOIN 	construct_project_table pro ON pro.construct_project_id = team.construct_project_workTeam_projectId   ");
			sbf2.append(" LEFT JOIN construct_project_dep dep ON dep.constuct_project_dep_id = pro.construct_project_dep  ");
			sbf2.append(" left join uc_user us on us.userid = team.construct_project_workTeam_userId  ");
			sbf2.append(" where  dep.constuct_project_dep_company=1 ");
			sbf2.append(" and  us.username='"+loginUser.getUsername()+"' ");
			if (StringUtils.hasText(construct_project_name)) {
				sbf.append(" and pro.construct_project_name like '%" + construct_project_name
						+ "%'");
			}
			
			data = constructService.constructList(pageIndex, pageSize, record, sbf2.toString());
			
		}
		
		
		
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}
	
	/**
	 * 工人list
	 */
	@RequestMapping(value = "/workerList", method = RequestMethod.GET)
	public ModelAndView workerList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		String construct_project_workTeam_id = request.getParameter("construct_project_workTeam_id");
		String construct_project_workTeam_departmentId = request.getParameter("construct_project_workTeam_departmentId");
		String construct_project_id = request.getParameter("construct_project_id");
		String construct_project_leader = request.getParameter("construct_project_leader");

		int userId=workerService.getUserByName(construct_project_leader);
		
		mv.addObject("userId", userId);

		mv.addObject("construct_project_workTeam_id", construct_project_workTeam_id);
		mv.addObject("construct_project_workTeam_departmentId", construct_project_workTeam_departmentId);
		mv.addObject("construct_project_id", construct_project_id);

		mv.setViewName("supplierMod/workerList");
		return mv;
	}
	
	@RequestMapping(value = "/workerList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String construct_project_id = request.getParameter("construct_project_id");
		String construct_project_workTeam_id = request.getParameter("construct_project_workTeam_id");
		
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		
		sbf.append(" ( ");
		sbf.append(" SELECT ");
		sbf.append(" worker.*,us.*,(select COUNT(1) from suppliermod_worker_apply apply where apply.suppliermod_worker_apply_userId =worker.supplierMod_worker_userId and apply.suppliermod_worker_apply_status=0) isOnApply ");
		sbf.append(" FROM ");
		sbf.append(" suppliermod_worker_table worker ");
		sbf.append(" LEFT JOIN uc_user us ON worker.supplierMod_worker_userId = us.userid ");
		sbf.append(" where  worker.supplierMod_worker_projectId="+construct_project_id+" and worker.supplierMod_worker_workTeamId="+construct_project_workTeam_id+" ");
		sbf.append(" ) tableAll ");

		
		String username = request.getParameter("username");
		if (StringUtils.hasText(username)) {
			sbf.append(" and us.username like '%" + username
					+ "%'");
		}
		
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		
		List<Map<String, Object>> data = constructService.constructList(
				pageIndex, pageSize, record, sbf.toString());
		
		
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}
	
	/**
	 * 工人选择
	*/
	@RequestMapping(value = "/workerCheck", method = RequestMethod.GET)
	public ModelAndView workerCheck(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("checkBox/workerCheck");
		return mv;

	}
	
	@RequestMapping(value="/workerCheck" ,method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerCheck(HttpServletRequest request,HttpServletResponse response) throws Exception {
		String username=request.getParameter("username");
		String departmentId=request.getParameter("departmentId");
		
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf=new StringBuffer();
		StringBuffer fields=new StringBuffer();
		fields.append("us.userid,us.username,us.phone_number,us.sex, role.role_name,dep.department_name,cen.center_name,com.company_name,dep.department_id");
		sbf.append("  uc_user us ");
		sbf.append("LEFT JOIN uc_role role on us.role_id=role.role_id ");
		sbf.append("LEFT JOIN uc_department dep on us.department=dep.department_id ");
		sbf.append("LEFT JOIN uc_center cen on dep.department_centerId=cen.center_id ");
		sbf.append("LEFT JOIN uc_company com on com.company_id=dep.department_companyId ");
		sbf.append(" where 1=1 and us.department="+departmentId+" ");
		
		if (StringUtils.hasText(username)) {
			sbf.append(" and username like '%" + username + "%'");
		}
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		
		List<Map<String, Object>> data=checkBoxService.getList(pageIndex, pageSize, record, sbf.toString(),fields.toString());
		
	    json.put("rows", data);
	    json.put("total", record.getValue());
	    return json;
	    
	}
	
	
	
	/**
	 * 保存
	 * 
	 * */
	@RequestMapping(value = "/save_Worker", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> save_Worker(HttpServletRequest request, ApartyPur apartyPur)
			throws Exception {
		Map<String, Object> json = new HashMap<String, Object>();
		try {
			String construct_project_id=request.getParameter("construct_project_id");
			String construct_project_workTeam_id=request.getParameter("construct_project_workTeam_id");
			String supplierMod_worker_userId=request.getParameter("supplierMod_worker_userId");
			
			Boolean checkWorker= workerService.checkWorkerExist(supplierMod_worker_userId);
			if (!checkWorker) {
				Worker worker=new Worker();
				worker.setSupplierMod_worker_id(0);
				worker.setSupplierMod_worker_projectId(Integer.valueOf(construct_project_id));
				worker.setSupplierMod_worker_userId(Integer.valueOf(supplierMod_worker_userId));
				worker.setSupplierMod_worker_workTeamId(Integer.valueOf(construct_project_workTeam_id));
				workerService.save_Worker(worker);
				json.put("Success", true);
				json.put("Msg", "保存成功");
			}else {
				json.put("Success", true);
				json.put("Msg", "此人已被分配在项目中，如需调动请走工人项目调动流程！");
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			json.put("Success", false);
			json.put("Msg", "保存失败");
		}
		return json;
	}
	
	
	/**
	 * 打卡记录list
	 */
	@RequestMapping(value = "/workerAttendList", method = RequestMethod.GET)
	public ModelAndView workerAttendList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("supplierMod/workerAttendList");
		return mv;
	}
	
	@RequestMapping(value = "/workerAttendList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerAttendList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String supplierMod_worker_userId = request.getParameter("supplierMod_worker_userId");
		
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		
		sbf.append(" hr_attend attend left join hr_attend_apply apply on attend.hr_attend_applyId=apply.hr_attend_apply_id  left join uc_user us on us.userid= attend.hr_attend_userId ");
		sbf.append(" where  attend.hr_attend_userId="+supplierMod_worker_userId+"  ");
		
		String hr_attend_date = request.getParameter("hr_attend_date");
		if (StringUtils.hasText(hr_attend_date)) {
			sbf.append(" and attend.hr_attend_date like '%" + hr_attend_date
					+ "%'");
		}
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		
		List<Map<String, Object>> data = constructService.constructList(
				pageIndex, pageSize, record, sbf.toString());
		
		
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}
	
	
	/**
	 * 项目调动申请
	 */
	@RequestMapping(value = "/workerApply", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerApply(HttpServletRequest request,WorkerApply workerApply) {

		Map<String, Object> json = new HashMap<String, Object>();
		try {
              //日期格式化
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			workerApply.setSuppliermod_worker_apply_creatTime(df.format(new Date()));
	         String nextUserid=request.getParameter("username");
	    
			workerService.workerApply(workerApply);
			
			User user = (User) request.getSession().getAttribute("loginUser");
			String userid=user.getUserid()+"";

			String processDefinitioKey = "workerApplyViwe"; // 定义流程的key,不可修改
			String title = "工人项目调动"; // 请注意
			String bizId = processDefinitioKey + "."
					+ workerApply.getSuppliermod_worker_apply_id(); // 获取业务id
		
			
		   activitiService.startProcesses(bizId, userid, processDefinitioKey,
					title);
		   
			
			
		/*    String content="你有一张工人项目调动申请单需要审批！";
			json=activitiService.sendEmail(title, content, nextUserid);*/

			json.put("Success", true);
			json.put("Msg", "保存成功，流程已启动");
		} catch (Exception e) {
			e.printStackTrace();
			json.put("Success", false);
			json.put("Msg", "保存失败，流程未启动");
		}
		      return json;

	}
	
	
	/**
	 * 调动记录
	 * 
	 */
	@RequestMapping(value = "/workerApplyList", method = RequestMethod.GET)
	public ModelAndView workerApplyList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("supplierMod/workerApplyList");
		return mv;
	}
	
	@RequestMapping(value = "/workerApplyList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerApplyList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String supplierMod_worker_userId = request.getParameter("supplierMod_worker_userId");
		
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		
		sbf.append(" ( ");
		sbf.append(" select (select con.construct_project_name  from	construct_project_table con where con.construct_project_id= apply.suppliermod_worker_apply_oldProId ) projectName, ");
		sbf.append(" pro.construct_project_name,us.username,apply.* from suppliermod_worker_apply apply ");
		sbf.append(" LEFT JOIN construct_project_table pro ON pro.construct_project_id = apply.suppliermod_worker_apply_proId ");
		sbf.append(" LEFT JOIN uc_user us ON us.userid = apply.suppliermod_worker_apply_userId ");
		sbf.append(" where  apply.suppliermod_worker_apply_userId="+supplierMod_worker_userId+"  ");
		sbf.append(" ) tab ");
		
		String suppliermod_worker_apply_creatTime = request.getParameter("suppliermod_worker_apply_creatTime");
		if (StringUtils.hasText(suppliermod_worker_apply_creatTime)) {
			sbf.append(" and apply.suppliermod_worker_apply_creatTime like '%" + suppliermod_worker_apply_creatTime
					+ "%'");
		}
		
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		
		List<Map<String, Object>> data = constructService.constructList(
				pageIndex, pageSize, record, sbf.toString());
		
		
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}
	
	/**
	 * 项目调动 审批
	 * 
	 * @throws Exception
	 * 
	 * */
	@RequestMapping(value = "/workerApplyAut", method = RequestMethod.GET)
	public ModelAndView workerApplyAut(HttpServletRequest request)
			throws Exception {
		ModelAndView mv = new ModelAndView();
		
		String taskid = request.getParameter("taskid");// 获取任务id
		String taskName = request.getParameter("taskName");
		String bizkey = activitiService.getBusinessBizId(taskid);// 获取业务编号

		String[] strs = bizkey.split("\\.");
		String bizId = null; // 业务编号
		for (int i = 0, len = strs.length; i < len; i++) {
			bizId = strs[i].toString();
		}
		List<Map<String, Object>> userList=null;
		if (taskName.equals("项目经理")) {
			 String fields=" a.userid,a.username";
				String where=" uc_user a join uc_role b";
				       where +=" on a.role_id=b.role_id";  
				       where +=" WHERE b.role_name like '%总经理'";   
			 userList=userService.queryId(fields, where);
		}
		
		//查询旧项目信息
		String wobkString  ="uu.username,uu.userid,swa.suppliermod_worker_apply_creatTime,";
		    wobkString +=" cpt.construct_project_name,swa.suppliermod_worker_apply_reason,";
		    wobkString +=" swa.suppliermod_worker_apply_oldProId";
	    StringBuffer sbf = new StringBuffer();
			sbf.append(" suppliermod_worker_apply swa");
			sbf.append(" JOIN construct_project_table cpt ON");
			sbf.append(" swa.suppliermod_worker_apply_proId=cpt.construct_project_id");
			sbf.append(" LEFT JOIN uc_user uu on uu.userid = swa.suppliermod_worker_apply_userId");
			sbf.append(" WHERE swa.suppliermod_worker_apply_id="+bizId);
			//查询旧项目信息
	   Map<String, Object> findwoMap=workerService.findWorker(wobkString, sbf.toString());
	      //查询新项目信息
	   String findname="cpt.construct_project_name as newProjectName";
		   sbf.delete(0, sbf.length());
		   sbf.append("suppliermod_worker_apply swa");
		   sbf.append(" LEFT JOIN  construct_project_table cpt ON swa.suppliermod_worker_apply_oldProId = cpt.construct_project_id");
		   sbf.append(" where swa.suppliermod_worker_apply_id ="+bizId);
	   //查询新项目信息
	   Map<String, Object> findmork=workerService.findWorker(findname, sbf.toString());

		List<Map<String, Object>> historyList = activitiService
				.getProcessComments(taskid);// 查询审批记录

		JSONObject jsonObject = new JSONObject();
		jsonObject.put("history", historyList);
		mv.addObject("history", jsonObject);

		
		mv.addObject("userList", userList);
	    mv.addAllObjects(findwoMap);
	    mv.addAllObjects(findmork);
		mv.addObject("taskid", taskid);
		mv.addObject("taskName", taskName);
		mv.addObject("userList", userList);
		mv.setViewName("supplierMod/workerApplyAut");
		return mv;
	}
	
	//审核
	@RequestMapping(value = "/workerApplyPass", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> workerApplyPass(HttpServletRequest request){
	        Map<String, Object> json=new HashMap<String, Object>();
	            try {
			          
	    	        workerService.workerApplyPass(request);
	      	        json.put("Success", true);
	    			json.put("Msg", "已审核!");
	    		} catch (Exception e) {
	    			e.printStackTrace();
	    			json.put("Success", false);
	    			json.put("Msg", "程序出错,请联系技术员");
	    	   }
	    			return json;
             }
	
	
}
