package com.casd.serviceimpl.manage;

import java.io.File;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.activiti.engine.TaskService;
import org.activiti.engine.delegate.DelegateExecution;
import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.annotations.Case;
import org.apache.jasper.tagplugins.jstl.core.When;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.casd.controller.web.Ref;
import com.casd.dao.manage.ContractapproveDao;
import com.casd.entity.hr.Hregister;
import com.casd.entity.manage.Contractapprove;
import com.casd.entity.uc.User;
import com.casd.service.hr.ActivitiService;
import com.casd.service.manage.ContractapproveService;

@Service
public class ContractapproveServiceImpl implements ContractapproveService {
	@Autowired
	private ContractapproveDao contractapproveDao;
	@Autowired
	private ActivitiService activitiService;
	@Autowired
	private TaskService  taskService;

	@Override
	@Transactional
	public List<Map<String, Object>> contractapproveList(int page, int pageSize,
			Ref<Integer> record, String fields, String where) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("fields", fields);
		param.put("where", where);

		if (record != null) {
			Integer count = contractapproveDao.getCount(param);
			record.setValue(count);
		}
		// 分页
		if (pageSize <= 0)
			throw new Exception("pageSize 必须 > 0");
		param.put("limit", String.format("limit %1$s,%2$s", page < 0 ? 0 : page
				* pageSize, pageSize));

		return contractapproveDao.getList(param);
		
	}

	@Override
	@Transactional
	public void saveContractapprove(Contractapprove contractapprove,String userid) throws Exception {
		
			int cid=contractapprove.getManage_contractapprove_id();
			if (cid==0) {
				contractapproveDao.saveContractapprove(contractapprove);

					String processDefinitioKey = "contractapproveView"; // 定义流程的key,不可修改
					String title = "项目合同"; // 请注意
					String bizId = processDefinitioKey + "."
							+ contractapprove.getManage_contractapprove_id(); // 获取业务id
	     activitiService.startProcesses(bizId, userid, processDefinitioKey,
							title);
			}else {
				contractapproveDao.saveContractapprove(contractapprove);
			}
			


	}


	@Override
	@Transactional
	public Map<String, Object> getData(String manage_contractapprove_id) {

		Map<String, Object> map=new HashMap<String, Object>();
		Map<String, Object> dataMap=new HashMap<String, Object>();

		
		String fieds ="*";
		StringBuffer sBuffer=new StringBuffer();
		sBuffer.append(" manage_contractapprove  where manage_contractapprove_id="+manage_contractapprove_id+" ");
		map.put("fields", fieds);
		map.put("where", sBuffer);
		dataMap=  contractapproveDao.getContractapprove(map);
	
		sBuffer.delete(0, sBuffer.length()-1);
		map.put("where", sBuffer);
		return dataMap;
	}

	@Override
	@Transactional
	public void delete_Contractapprove(String bizId) {
		Map<String, Object> map=new HashMap<String, Object>();
		StringBuffer sBuffer=new StringBuffer();
		sBuffer.append(" manage_contractapprove where manage_contractapprove_id = "+bizId);
		map.put("what",sBuffer.toString()); 
		
		String beyId="contractapproveView";
		
		activitiService.deleteprocessInstance(bizId, beyId);
		
		contractapproveDao.delete_Contractapprove(map);
		
	}
	@Override
	@Transactional
	public Map<String, Object> uploadFile(MultipartFile file,HttpServletRequest request) {
  
		Map<String, Object> json = new HashMap<String, Object>();
		String bizId=request.getParameter("bizId");
		 try {
	            // 获取原始文件名  
	            String fileName = file.getOriginalFilename();  
		
				if(StringUtils.isEmpty(fileName)){
					json.put("Success", false);
					json.put("Msg", "请选择要导的文件");
					return json;
				}
							       
	        	File file2=new File("e:/uploadFile/file");	
	            if(!file2.exists()) {  
	            	file2.mkdirs();  
	            }  
	            //定义文件路径
	            String fileUploadBasePath = "e:/uploadFile/file/";
	            String timeStr = System.currentTimeMillis() + fileName;
	            String newFilePath = fileUploadBasePath + timeStr;
	            File newFile = new File(newFilePath);
	            file.transferTo(newFile);  // 写入文件到服务器目录
	            System.out.println(timeStr);
	            Map<String, Object> uploadVar=new HashMap<String, Object>();
	            uploadVar.put("filds", timeStr);
	            uploadVar.put("billID", bizId);
	            contractapproveDao.updatefile(uploadVar);

			json.put("Success", true);
			json.put("Msg", "上传成功,可点击查看文件是否正确");
	     }catch (Exception e) {
	    	 e.printStackTrace();
		    json.put("Success", false);
			json.put("Msg", "上传失败"+e);
		}
	    return json;

	
	}


	public Map<String, Object> findContractapprove(String fields, String where) {
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("fields", fields);
		map.put("where", where);
		
		return contractapproveDao.getContractapprove(map);
	}

	@Override
	public void add_Contractapprove(String manage_contractapprove_id) {
		// TODO Auto-generated method stub
		
	}
   
	


     /***修改单据状态
      * 
      */
	@Override
	@Transactional
	public void updateCttp(DelegateExecution execution, String status) {
		
      String bizkey= execution.getProcessBusinessKey();
		
		String[] strs=bizkey.split("\\.");
        String bizId=null;
		for(int i=0,len=strs.length;i<len;i++){
			bizId=strs[i].toString();
		}
		Contractapprove cttp=new Contractapprove();
		cttp.setManage_contractapprove_id(Integer.valueOf(bizId));
		cttp.setManage_status(Integer.valueOf(status));
	    contractapproveDao.updateCtp(cttp);
		
	}

	@Transactional
	public void contractapprovePass(HttpServletRequest request) {
	
		
		Map<String, Object> vars=new HashMap<String, Object>();
		  String taskid=request.getParameter("taskid");
	
		  User user=(User) request.getSession().getAttribute("loginUser");//当前办理人
		  String username=user.getUserid()+"";
	
		    String taskName=request.getParameter("taskName");
		    String nextUser=request.getParameter("username");//下一个审核人
	     	String options=request.getParameter("options");//获取审核意见
		     vars.put("sign", "true");
		     activitiService.comment(taskid,username,options);
	 	    taskService.claim(taskid,username);
			taskService.complete(taskid,vars);
		
	}


	



	
	
}
