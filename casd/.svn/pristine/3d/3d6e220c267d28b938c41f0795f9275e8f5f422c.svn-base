package com.casd.serviceimpl.construct;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.casd.controller.web.Ref;
import com.casd.dao.construct.ConstructDepDao;
import com.casd.entity.construct.Construct;
import com.casd.entity.construct.ConstructDep;
import com.casd.entity.construct.PurchaseEntry;
import com.casd.entity.construct.PurchaseHead;
import com.casd.service.construct.ConstructService;

@Service
public class ConstructServiceImpl implements ConstructService {
	
	
	@Autowired
	private ConstructDepDao constructDepDao;


	
	@Override
	@Transactional
	public List<Map<String, Object>> constructDepList(int page,
			int pageSize, Ref<Integer> record, String where) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();

		param.put("where", where);

		if (record != null) {
			int count = constructDepDao.getDepCount(param);
			record.setValue(count);
		}
		// 分页
		if (pageSize <= 0)
			throw new Exception("pageSize 必须 > 0");

		param.put("limit", String.format("limit %1$s,%2$s", page < 0 ? 0 : page
				* pageSize, pageSize));

		return constructDepDao.constructDepList(param);
	}

	@Override
	@Transactional
	public List<Map<String, Object>> constructList(int page, int pageSize,
			Ref<Integer> record, String where) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();

		param.put("where", where);

		if (record != null) {
			int count = constructDepDao.getConstructCount(param);
			record.setValue(count);
		}
		// 分页
		if (pageSize <= 0)
			throw new Exception("pageSize 必须 > 0");

		param.put("limit", String.format("limit %1$s,%2$s", page < 0 ? 0 : page
				* pageSize, pageSize));

		return constructDepDao.constructList(param);
	}

	@Override
	public Construct getConstructById(Map<String, Object> map) {
	
		return constructDepDao.getConstructById(map);
	}

	@Override
	public ConstructDep findDepById(String where) {
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("where", where);

		return constructDepDao.cptDepById(map);
	}

	@Override
	public Map<String, Object> updatectDep(ConstructDep dep) throws Exception {
	
		constructDepDao.updatectDep(dep);
		
		return null;
	}


	@Override
	public Boolean isExist(Map<String, Object>params) {
	
		ConstructDep constructDep=constructDepDao.isExist(params);
		String constuct_project_dep_list = constructDep.getConstuct_project_dep_list();
		
		List list=new ArrayList();
		String[] arrays = constuct_project_dep_list.split("\\s*,\\s*");
		for (String s : arrays) {
			if (s.length() == 0)
				continue;
			Integer i = Integer.parseInt(s);
			if (!list.contains(i))
				list.add(i);
		}
		if(list.contains(Integer.valueOf(params.get("userId").toString()))){
			
			return true;
		}
		return false;
	}
  
	
	@Override
	public void delete_Dep(String where) {
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("where", where);
		constructDepDao.delete_Dep(map);
	}

	@Override
	public void saveConstruct(Construct construct) {
		// TODO Auto-generated method stub
		constructDepDao.saveConstruct(construct);
	}

	@Override
	public void delePro(Map<String, Object> map) {
		// TODO Auto-generated method stub
		constructDepDao.delePro(map);
	}

}
