package com.casd.controller.finance;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.entity.construct.ConstructDep;
import com.casd.entity.finance.Material;
import com.casd.entity.finance.MaterialModel;
import com.casd.entity.finance.MaterialSeries;
import com.casd.service.finance.MaterialService;

@Controller
@RequestMapping("/admin")
public class MaterialController {

	@Autowired
	private MaterialService materialService;

	
	/**
	 * 材料系列资料
	 */

	@RequestMapping(value = "/materialSeries", method = RequestMethod.GET)
	public ModelAndView materialSeries(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("finance/materialSeries");
		return mv;
	}

	@RequestMapping(value = "/materialSeries", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> materialSeries(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		sbf.append(" construct_material_series where 1=1 ");

		String searchName = request.getParameter("construct_material_seriesName");
		if (StringUtils.hasText(searchName)) {
			sbf.append(" and construct_material_seriesName like'%" + searchName
					+ "%'");
		}

		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;

		List<Map<String, Object>> data = materialService.materialList(
				pageIndex, pageSize, record, sbf.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;
	}
	
	/**
	 *   材料系列保存
	 * */
	@RequestMapping(value = "/saveSeries", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject saveSeries(HttpServletRequest request, MaterialSeries materialSeries,
			String rowData) throws Exception {
		JSONObject json = new JSONObject();
		try {
			rowData = rowData.substring(1);
			String[] ids = rowData.split("]");
			materialSeries.setConstruct_material_seriesSuppliers(ids[0]);
			materialService.saveSeries(materialSeries);
		} catch (Exception e) {
			json.put("msg", "操作有误!");
			
			e.printStackTrace();
		}
		return json;

	}
	
		// 修改数据初始化
		@RequestMapping(value = "/selectData", method = RequestMethod.GET)
		@ResponseBody
		public Map<String, Object> queryId_dep(HttpServletRequest request,
				Model model) throws Exception {

			StringBuffer sbf = new StringBuffer();
			String cid = request.getParameter("cid");
			Map<String, Object> json = new HashMap<String, Object>();
			String fields = " * ";
			sbf.append(" construct_material_series  WHERE construct_material_seriesID="
					+ cid);
			List<Map<String, Object>> dataList = materialService.selectData(fields,sbf.toString());
			
			if (StringUtils.hasText(dataList.get(0).get("construct_material_seriesSuppliers").toString())) {
				fields = " construct_supplier_id,construct_supplier_name";
				sbf.delete(0, sbf.length());
				sbf.append(" construct_supplier_table where construct_supplier_id in("
						+ dataList.get(0).get("construct_material_seriesSuppliers") + ")");
				List<Map<String, Object>> listMap = materialService.selectData(fields,
						sbf.toString());
				json.put("listMap", listMap);
			}
			return json;
		}
	
	
		// 材料系列列表删除
		@RequestMapping(value = "/delete_Series", method = RequestMethod.POST)
		@ResponseBody
		public Object delete_Series(HttpServletRequest request) {
			Map<String, Object> json = new HashMap<String, Object>();
			String seriesID = request.getParameter("seriesID");
			
			try {

				StringBuffer sbf = new StringBuffer();
				sbf.append(" where construct_material_seriesID="+ seriesID);
				materialService.delete_Series(sbf.toString());

			} catch (Exception e) {
				json.put("msg", "删除失败!");  
				e.printStackTrace();
			}

			return json;

		}
		
		
	
	/**
	 * 材料基础资料
	 */

	@RequestMapping(value = "/materialList", method = RequestMethod.GET)
	public ModelAndView materialList(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		
		String seriesID = request.getParameter("construct_material_seriesID");
		mv.addObject("seriesID", seriesID);
		mv.setViewName("finance/materialList");
		return mv;
	}

	@RequestMapping(value = "/materialList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> materialList(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String seriesID = request.getParameter("construct_material_seriesID");
		
		Ref<Integer> record = new Ref<Integer>();
		Map<String, Object> json = new HashMap<String, Object>();
		StringBuffer sbf = new StringBuffer();
		sbf.append(" construct_material_table where 1=1  and construct_material_seriesId="+seriesID+"");

		String searchName = request.getParameter("construct_material_name");
		if (StringUtils.hasText(searchName)) {
			sbf.append(" and construct_material_name like'%" + searchName
					+ "%'");
		}

		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;

		List<Map<String, Object>> data = materialService.materialList(
				pageIndex, pageSize, record, sbf.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;
	}

	/**
	 * 材料规格列表
	 * 
	 * @author Administrator
	 * **/
	@RequestMapping(value = "/materialhome", method = RequestMethod.GET)
	public ModelAndView materialmodelList(HttpServletRequest request, String cid) {
		ModelAndView mv = new ModelAndView();
		cid = request.getParameter("construct_material_id");
		mv.addObject("cid", cid);
		mv.setViewName("finance/materialhome");
		return mv;

	}

	@RequestMapping(value = "/materialhome", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> materialmodelList(HttpServletRequest request)
			throws Exception {
		Map<String, Object> json = new HashMap<String, Object>();
		Map<String, Object> params = new HashMap<String, Object>();
		Ref<Integer> record = new Ref<Integer>();
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		String cid = request.getParameter("construct_material_id");
		StringBuilder sbf = new StringBuilder();
		sbf.append(" construct_material_model a");
		sbf.append(" JOIN construct_material_table b ON a.construct_material_model_parentid=b.construct_material_id");
		sbf.append(" where 1=1");
		sbf.append(" and a.construct_material_model_parentid=" + cid);
		String model_name = request
				.getParameter("construct_material_model_name");
		if (StringUtils.hasText(model_name)) {
			sbf.append(" and a.construct_material_model_name like'%"
					+ model_name + "%'");
		}
		params.put("where", sbf.toString());
		List<Map<String, Object>> data = materialService.getMaterialById(
				pageIndex, pageSize, record, sbf.toString());
		json.put("rows", data);
		json.put("total", record.getValue());
		return json;

	}

	// 材料编辑
	@RequestMapping(value = "/editMaterial", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> editMaterial(HttpServletRequest request)
			throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();

		String model_name = request.getParameter("model_name");
		String model_remarks = request.getParameter("model_remarks");
		String model_unit = request.getParameter("model_unit");
		String model_parentid = request.getParameter("model_parentid");
		String model_id = request.getParameter("model_id") == "" ? "0"
				: request.getParameter("model_id");

		try {
			MaterialModel mtm = new MaterialModel();
			mtm.setConstruct_material_model_id(Integer.parseInt(model_id));
			mtm.setConstruct_material_model_name(model_name);
			mtm.setConstruct_material_model_remarks(model_remarks);
			mtm.setConstruct_material_model_unit(model_unit);
			mtm.setConstruct_material_model_parentid(Integer
					.parseInt(model_parentid));
			materialService.editmaterial(mtm);
		} catch (Exception e) {
			map.put("msg", "修改失败");
		}
		return map;

	}

	/**
	 * 删除材料
	 * */
	@RequestMapping(value = "/deleteMaterial", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> delete(HttpServletRequest request)
			throws Exception {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			StringBuffer sbf = new StringBuffer();
			String menuids = request.getParameter("menuids");
			menuids = menuids.substring(1);
			String[] ids = menuids.split("]");
			sbf.append(" where construct_material_model_id in (" + ids[0] + ")");
			materialService.delete(sbf.toString());
		} catch (Exception e) {
			map.put("msg", "删除失败,请联系管理员！");
		}

		return map;

	}

	@RequestMapping(value = "/materialset", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> materialset(HttpServletRequest request) {

		Map<String, Object> json = new HashMap<String, Object>();
		String material_id = request.getParameter("material_id") == "" ? "0"
				: request.getParameter("material_id");
		try {
			// 材料录入
			String material_name = request.getParameter("material_name");
			String material_remarks = request.getParameter("material_remarks");
			String seriesID = request.getParameter("seriesID");
			Material mtl = new Material();
			mtl.setConstruct_material_id(Integer.parseInt(material_id));
			mtl.setConstruct_material_name(material_name);
			mtl.setConstruct_material_remarks(material_remarks);
			mtl.setConstruct_material_seriesId(Integer.valueOf(seriesID));
		    materialService.addMaterial(mtl);
		} catch (Exception e) {
			json.put("msg", "保存失败,请联系管理员！");

		}
		return json;
	}
	  
	/**
	 *   
	 * 删除材料信息
	 * */
	@RequestMapping(value = "/deletejoin", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> deletejoin(HttpServletRequest request) {
		
		   Map<String, Object> jsonMap=new HashMap<String, Object>();
	  try {	
		String material_id=request.getParameter("material_id");
		StringBuffer  sbf=new StringBuffer();
		sbf.append(" construct_material_table LEFT JOIN construct_material_model");
		sbf.append(" ON construct_material_table.construct_material_id = construct_material_model.construct_material_model_parentid");
		sbf.append(" WHERE construct_material_id = "+material_id);
	    
		materialService.deletemt(sbf.toString());
	  } catch (Exception e) {
		  jsonMap.put("msg", "操作失败！");
		}
		return jsonMap;
		
	}

}
