package com.casd.controller.personManagem;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.casd.controller.web.Ref;
import com.casd.dao.uc.UserDao;
import com.casd.entity.flow.FlowAudit;
import com.casd.entity.hr.HrMembe;
import com.casd.entity.uc.User;
import com.casd.service.flow.FlowService;
import com.casd.service.uc.UserService;


@Controller
@RequestMapping("/admin")
public class BecomeController {
	

	@Autowired
	private UserDao userDao;
	@Autowired
	private UserService userService;
	
	@Autowired
	private FlowService flowService;
	
	@RequestMapping(value = "/becomeList", method = RequestMethod.GET)
	public ModelAndView becomeList() {
		ModelAndView mv=new ModelAndView();
		mv.setViewName("personManagem/becomeList");
		
		return mv;
		
	}
	/**
	 * 转正申请列表
	 * 
	 * */
	@RequestMapping(value = "/becomeList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> becomeList(HttpServletRequest request) throws Exception {
		Map<String, Object> json=new HashMap<String, Object>();		
		int pageSize = Integer.parseInt(request.getParameter("rows"));
		int pageIndex = Integer.parseInt(request.getParameter("page")) - 1;
		Ref<Integer> record = new Ref<Integer>();
		StringBuilder sbf=new StringBuilder();
	
	
		return json;
		
	}
	     /**
	      * 审核人信息
	      * */
	      @RequestMapping(value = "/become", method = RequestMethod.GET)
		 public ModelAndView become(HttpServletRequest request) throws Exception {
			 ModelAndView mv=new ModelAndView();
			 
			 String cid= request.getParameter("cid");
			  StringBuilder sbf = new StringBuilder();
			  String fields="u.userid,u.username,u.department,u.education,u.major,u.on_trial,u.incorporation_date,u.close_time";
				sbf.append(" uc_user u where 1=1");
				sbf.append(" and u.userid="+cid);
			 List<Map<String, Object>> mpaList = userService.queryId(fields, sbf.toString());
			 
			 for (Map<String, Object> map : mpaList) {
				 mv.addObject("mpaList", map);
		        }
			  mv.setViewName("personManagem/become");
			return mv;
			
		}
		
	  /**
	   *  保存转正申请
	   * **/
	  @RequestMapping(value = "/become", method = RequestMethod.POST)
	  @ResponseBody
	 public Map<String, Object> become(HttpServletRequest request,String pars) throws Exception {
		 
		  HrMembe hrMembe=new HrMembe();
		  
		int userid= Integer.parseInt(request.getParameter("userid"));
	
		  
		  int turn_id = hrMembe.getTurn_id();
			// 工作流
			Map<String, Object> linkMap = new HashMap<String, Object>();
			String selectRole = request.getParameter("selectRole");
			String username= request.getParameter("username");
			linkMap.put("selectRole", selectRole); // 审批人
			linkMap.put("leaveID", userid); // 单据id
			linkMap.put("Applicant", username); // 申请人
			linkMap.put("billURL", "auditBecome.do");// 审核界面url
			linkMap.put("flow_bill_type", "转正申请"); // 审核单据类型

			flowService.saveFlowAudit(linkMap);
		
		return null;
		  
		  
	  }
	
	
	        @RequestMapping(value = "becomeFlow", method = RequestMethod.POST)
			@ResponseBody
			private Map<String, Object> becomeFlow(HttpServletRequest request,Model model) throws Exception {
				String flow_id = "10";
				JSONObject jsonObject = new JSONObject();
	             Map<String, Object> map=new HashMap<String, Object>();
				User loginUser = (User) request.getSession().getAttribute(
						"loginUser");
			/*	String username = loginUser.getUsername();
				String fields="*";
				String where=" uc_user a";
				map.put("fields", fields);
				map.put("where", where.toString());
			    List<User>  maps=userDao.queryUser(map);*/
			
				String username = loginUser.getUsername();
				List<Map<String, Object>> flow = flowService.initFlow(username,
						flow_id);
				jsonObject.put("flow", flow);
				jsonObject.put("userName", username);
			

				
				return jsonObject;
				
			}
	  
	  
	        
	  	  /**
	  		 * 跳转审核界面
	  	     * 
	  		 */
	  
	  		@RequestMapping(value = "/auditBecome", method = RequestMethod.GET)	
	  		public ModelAndView auditBecome(HttpServletRequest request, Model model) throws Exception {
	  			 ModelAndView mv=new ModelAndView();
	  			
	  			String auditID= request.getParameter("auditID");
	  		
	  			String fields ="*";
	  			StringBuilder sbf=new StringBuilder();
	  			sbf.append(" flow_audit_table a JOIN  uc_user b on b.userid=a.flow_bill_id");
	  			sbf.append(" JOIN uc_role  c ON b.role_id=c.role_id where 1=1");
	  			sbf.append(" and a.flow_audit_id="+auditID);
	  			
	  			List<Map<String, Object>>maps =userService.queryId(fields, sbf.toString());
	  			for (Map<String, Object>map:  maps) {
	  				mv.addAllObjects(map);

				}
	 	  		mv.addObject("auditID", auditID);
	  			mv.setViewName("personManagem/auditBecome");
	  			return mv;
	  		}
	  		
	  		/**
	  		 * 转正申请审核
	  		 * */
	 		@RequestMapping(value = "/auditBecome", method = RequestMethod.POST)	
	 		@ResponseBody
	  		public Map<String, Object> auditBecome(HttpServletRequest request,@RequestParam("type") String type) throws Exception{
	 			Map<String, Object> params=new HashMap<String, Object>();
	 			String auditID= request.getParameter("auditID");
	 			String flow_audit= request.getParameter("flow_audit");
	 			String userid= request.getParameter("userid");
	 			
	 			
	 			//审核通过
	 			if ("pass".equals(type)) {
	 				
	 				params.put("option",flow_audit);
	 			    params.put("auditID", auditID);
	 			    params.put("billID",userid);
	 				//flowService.auditBill(params);
	 				
	 				//审核不通过
				}else if ("notpass".equals(type)){
					params.put("option",flow_audit);
	 			    params.put("auditID", auditID);
	 			    params.put("billID",userid);
					flowService.backBill(params);
					
				}else if ("tuihui".equals(type)){
					
				}
	 			
	 			
				return null;
	 			
	 		}
	  
	 		@RequestMapping(value = "/becomeView", method = RequestMethod.GET)	
	 		public ModelAndView becomeView(HttpServletRequest request,Model model) throws Exception {
	        	ModelAndView mv=new ModelAndView();
	        	StringBuffer sbf=new StringBuffer();
	        	JSONObject jsonObject = new JSONObject();
	        	
	        	Map<String, Object> map = new HashMap<String, Object>();
	        	String fields="a.username,a.department,a.education,a.major,a.on_trial,a.worker,a.incorporation_date,a.close_time,b.role_name";
	        String 	auditID	=request.getParameter("auditID");

	        sbf.append(" uc_user a join uc_role b on a.role_id=b.role_id ");
	        sbf.append(" where a.userid="+auditID);
	        	List<Map<String, Object>> maps=userService.queryId(fields, sbf.toString());
	        	for (Map<String, Object> param:maps) {
	        		mv.addAllObjects(param);
				}
	        	map.put("id", auditID);
	        	
	        	List<FlowAudit> flowAudits = flowService.findAuditByBillId(map);
	    		JSONObject auditJson = new JSONObject();
	    		if (flowAudits.size() != 0) {
	    			Map<String, Object> audit = new HashMap<String, Object>();

	    			for (int i = 0; i < flowAudits.size(); i++) {
	    				FlowAudit flowAudit = flowAudits.get(i);
	    				String flow_auditer = flowAudit.getFlow_auditer();
	    				String flow_audit_option = flowAudit.getFlow_audit_option()==null?"未审批":flowAudit.getFlow_audit_option();
	    				audit.put("flow_audit_option", flow_audit_option);
	    				audit.put("flow_auditer", flow_auditer);
	    				auditJson.put(String.valueOf(i), audit);
	    			}
	    			jsonObject.put("audit", auditJson);
	    		}
	    		model.addAttribute("audit", jsonObject);
	        	
	        	
	        	mv.setViewName("personManagem/becomeView");
				return mv;
				
			}
	
}
